#+author: esac
#+startup: overview
#+property: header-args :comments yes :results silent

* EOS

  Just another org-mode based Emacs configuration,
  or a elisp interpreter desktop distribution.
  | Wait... What!? |

* Disclaimer

  I don't recommend anyone to install or use this
  configuration directly as there is no support for it
  and changes quite often, although this is probably
  the final structure it's advisable to view this
  =README= only as a reference/guide for the author himself.

  So, here goes a little bit of advice: READ Emacs/Elisp manual! (RTFM!)

  And write your own ~init.el~, but feel free
  to fork or copy anything from ~/src/eos.org~
  that attends your needs :)

** Screenshot

   #+CAPTION: EMACS OS
   #+NAME:   fig:EOS-screenshot

   [[./assets/eos.png]]

   | Present Day, heh... Present Time |

* Introduction

  Using Emacs (Elisp interpreter) as the only IO bridge
  between human and machine. In another words, an Emacs
  configuration well designed and integrated that provides
  a generic computer environment for everyday use.

  Org-mode is used to write/organize the configuration
  (~src/eos.org~) in a literate programming format,
  so it contains documentation plus source code blocks
  that will be tangled generating the ~src/init.el~ final
  Elisp script.

  * Note: Throughout this document the word =application=
    refers to any =elisp package= or =external program=.

  It's important to understand that all applications with
  different purposes, made in Elisp or not, passes in a way or
  another through the Elisp interpreter.

  So again, =application(s)= implies =Emacs/Elisp packages=
  or =external programs=.

** Features (overview):

   - Just one major language (=ELISP=) to conquer them all!
   - Information comes to you as required and not the other way around.
   - Use the same keybinds everywhere (learn once, use forever and ever).

   - Use the same editor capabilities for all applications
     (or at least try to).

   - Use the same =GUI Interface= (frames/window/buffers) for all
     applications.

   - Just one development environment for all languages:
     - Apparence
     - Editing
     - Documentation
     - Communication
     - Navigation
     - Completion
     - Syntax/Spell Check
     - Interpretation
     - Compilation
     - Debugging
     - Testing
     - Rationalization
     - Versioning
     - Measurement
     - Etc...

   - Understand that data is generic (in computer science we deal
     with idealize components) and can be manipulated (transformed)
     through different paths.

   - Huge improvements in productivity:
     - Stay focused, surfing in the same pleasant/comfortable
       flow (my preferred kind of mood).
     - No useless/annoying distractions.
     - Just do what was asked and nothing more.

   - Decrease the gap between: =a prof of concept= and the =final= release!

   - Provide tools to easily investigate any process/procedure of
     interest.

   - Communication (=pipes/ipcs/streams of data=) between peers are
     transparent, proving a very easy and convenient integration for
     all modules:
     - Packages
     - Applications
     - Buffers/Windows/Frames
     - Etc...

* Dependencies

  1. Cask
  2. Emacs >= 26.3
  3. Packages
     - Listed on: ~default/default.Cask~

** Optional

   Some =emacs packages= uses external (non-elisp) programs, like:

   1. Ag - The Silver Searcher
   2. Global
   3. Etags
   4. Aspell/Ispell
   5. Compton
   6. Transset
   7. Rtags Server

* Tested on

  - FreeBSD 12.1 RELEASE
  - Debian GNU/Linux 10

* Installation

  NOTE: The installation script was made to speed up
        the deploy process on my new machines.

  Download and execute (curl required):

  #+BEGIN_SRC
     sh -c "$(curl -fsSL https://raw.githubusercontent.com/esac-io/eos/master/scripts/install.sh)"
  #+END_SRC

  Script steps:

  1) Check dependencies
  2) Clone =cask= and =eos= repositories
  3) Backup ~.emacs.d~ directory
  4) Install third-party packages listed in ~/src/default/default.Cask~ file
  5) Tangle source code from ~src/eos.org~ to ~init.el~
  6) Byte compile ~init.el~ script

* Usage

  Using this Emacs configuration isn't different of using
  vanilla Emacs itself with a "few" reforms.
  As such, the official Emacs tutorial is a great way to understanding
  a little bit of its universe.

  So, open Emacs and press =C-h= (the help map prefix) and
  press =t= to evaluate ~help-with-tutorial~ function that will
  start the interactive tutorial.

  - Enjoy your late nights :)

  - Note: The main purpose of the Emacs tutorial is teach you
    the most important standard Emacs commands (or functions)
    and the mapped keybinds used to trigger then.

* Keybinds

  Basically, new prefix maps are created for the most commonly
  used minor modes and their functions are mapped within
  their respective maps.

  After that, the prefix maps will be placed in the =Ctl-x-map= prefix
  map, resulting in the standardization of commands (functions)
  access sequences - =keybinds= or =chords=.

  For the sake of sanity a lot of keybinds have been cleaned up,
  it's preferable (IMO) a small set of keybinds,
  only the most used ones, providing that way a more stable, less
  error prone), overall usability.

  When 'exotic' functions are needed to be called, just use
  =execute-extended-command= binded to =M-x=.

  Note: The =minor-mode-map-alist= was completely clean up, this was
  proven to be a huge pain relief resulting in a considerable
  productivity gain.

  For more information checkout the =Cleanup= section at
  ~src/eos.org~.

** Basic

   If you do not understand the terminology of the tables below,
   it is advisable to read the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html][emacs keybinds manual]].

**** Fundamental

     | Keyboard | Emacs Notation | Description |
     |          |                |             |
     | Alt      | M-             | Meta Key    |
     | Crtl     | C-             | Command Key |

**** Keymaps

     Keymaps are data structures that holds key sequences (chords) and
     map/trigger commands (elisp functions).

     | Keymap           | Prefix Key | Available | Description        |
     |                  |            |           |                    |
     | Global-map       | C- and M-  | Always    | Generic Actions    |
     | Ctl-x-map        | C-x        | Always    | Generic Actions    |
     | <Minor-mode>-map | C-x <key>  | Always    | Minor Mode Actions |
     | <Major-mode>-map | C-c        | Maybe     | Major Mode Actions |

** Help

   To verify what keys are mapped use =M-x describe-bindings RET=
   or =C-h b=, it's possible to restrict the search using =C-h= or =?=
   post-fix for a specific map, e.g:

   | Keybind | Description           |
   | C-h C-h | help-map help         |
   | C-c C-h | <major>-mode-map help |
   | C-x C-h | ctl-x-map help        |
   | C-x l ? | <minor>-mode-map help |

** C-x

   New keymaps are defined to hold the most
   common/used commands (elisp functions), they are
   divided according to their behavior classification:

   | Prefix Keymap  | Prefix  | Description  |
   |                |         |              |
   | eos-files-map  | C-x f   | Files        |
   | eos-window-map | C-x w   | Windows      |
   | eos-pm-map     | C-x p   | Projects     |
   | eos-sc-map     | C-x e   | Errors       |
   | eos-tags-maps  | C-x t   | Tags         |
   | eos-docs-maps  | C-x l   | Library/Docs |
   | eos-utils-map  | C-x c   | Utilities    |
   | eos-ac-map     | C-x TAB | Completion   |

** C-c

   Some maps will be only used in specific modes,
   e.g, cc-mode:

   | Mode  | Keymap    | Prefix | Description |
   |       |           |        |             |
   | C/C++ | rtags-map | C-c r  | Rtags       |

** Global

   Not all keybinds will be listed here, just the keybinds that
   have changed from the standard and the most used ones.

   Remember that you always can call the functions =C-h k= (describe-key)
   and =C-h b= (describe-bindings) to require this information.

   | Keymap | Keybind | Function                     |
   | Global | C-a     | back-to-indent-or-line       |
   | Global | C-M-v   | scroll-other-window          |
   | Global | C-M-y   | scroll-other-window-down     |
   | Global | M-i     | indent-region-or-buffer      |
   | Global | M-c     | comment-or-uncomment-region  |
   | Global | M-j     | clone-current-line-or-region |
   | Global | M-n     | transpose-lines-up           |
   | Global | M-p     | transpose-lines-down         |
   | ...    | ...     | ...                          |

* Packages

  Cask is a project management tool for Emacs that helps automate the
  package development cycle; development, dependencies, testing,
  building, packaging and more.

  Cask can also be used to manage dependencies for your
  local Emacs configuration.

  Itâ€™s based on a ~Cask~ file, which identifies an Emacs Lisp package,
  provides meta information about the package and
  declares its contents and dependencies.

** Configure

   To add more packages just edit the ~/.emacs.d/Cask~ file, generated
   by installation script, e.g, to add 'function-args' package,
   put the code snippet below inside the ~Cask~ file.

   #+BEGIN_SRC sh

   (depends-on "function-args")

   #+END_SRC

   Using different source then Melpa is possible thanks
   to =depends-on= and acceptable fetcher keywords like =:git=:

   #+BEGIN_SRC sh

   (depends-on "undo-tree"
    :git "http://www.dr-qubit.org/git/undo-tree.git")

   #+END_SRC

   In the first variant, install the package from a package archive,
   optionally requiring a minimum-version. In the second variant,
   install the package from a VCS repository.

   Fetcher keywords:

   - =(:git :bzr :hg :darcs :svn :cvs=)

   The argument is the package's repository URL
   source.

   For more details see [[https://cask.readthedocs.io/en/latest/guide/usage.html][cask's manual]].

** Install

   To install all packages listed on the ~Cask~ file, use =cask
   install= inside the user Emac's directory where ~Cask~ file
   resides, e.g:

   #+BEGIN_SRC sh

   $ cd ~/emacs.d; cask install

   #+END_SRC

   - Tip: When problems with missing dependencies are encountered
     (usually happens when using a fetcher keyword like :git),
     put the dependency code snippet ~(depends-on "missing-dep-package-name")
     above the target package and give =cask install= command another shot.

** Remove

   You have to manually remove the target package directory.
   To find out where the packages were installed, use:

   #+BEGIN_SRC sh

   $ find ~/.emacs.d/.cask -type d -name <package-name>*

   #+END_SRC

   To avoid package re-installation remove (depends-on
   <package-name>) before =cask install= calls.

   Delete package's folder:

   #+BEGIN_SRC emacs-lisp

   $ rm -rf ~/.emacs.d/.cask/26.3/elpa/dashboard-20200225.745

   #+END_SRC

   In this example, dashboard package files will be deleted,
   its configuration will be skipped.

   - IMPORTANT: Don't forgot to remove both: package's folder and
     repository entry, otherwise the package will continue to be
     installed when =cask install= is executed.

* Adapt

  If you want to modify any aspects (or extend) this configuration
  without touching the ~/src/eos.org~, just edit/add your own Elisp
  code inside ~/src/trash.el~.

  Note: ~src/trash.el~ will be the last script loaded by ~/src/trash.el~.

* Advises

  0. Do one thing and do it well (Unix philosophy).
  1. If something is bothering you, fix it!
  2. Global behavior aways available and static.
  3. Few keybinds sets.

  4. Repeat keybinds postfix for mode-specific commands
     according to their logical classification.

  5. Use the same action flow logic, for the same
     class of commands.

  6. Use as few modules (packages) as possible and always try to use
     modules already installed on Emacs to meet your needs.
     If you can withdraw a module, do so! Most of the time it
     takes little or no effort, and the gain is considerable.
     So, be alert to identify these situations!

  7. Prioritize Emacs's native packages (builtin) over third-party
     ones. If any demand comes to light try to resolve
     with these packages first, then third-party packages already
     installed and finally (maybe, a huge one) the internet.
     Sometimes a little extension on this blotted-packages sets
     are everything needed to bring a new feature to live or
     resolve a issue.

  8. Successive refinements: in constant refactoring!
     Always improve, do not fear the winds of change!

  9. Have fun!

* FAQ

  - Q: Mac/Windows will be supported any time soon?
  - A: Nope.

  - Q: Why don't you use evil/hydra/which-key/use-package/etc?
  - A: It is not just a matter of taste, it is simply because
    they get in the way disturbing the desired transformation to
    occur, and I prefer a more direct/effective approach.
    Remember thatâ€™s the way I think, you can add these modules
    on your own and make your life a little more miserable, be my guess!

  - Q: And what about helm/ivy/counsel/swiper?
  - A: Well, Icomplete its minimal (works very similar to the beloved
    dmenu), builtin, generic, fast, less intrusive, and fulfill
    all my needs, thanks Prot, to bring this forgotten package to light!

  - Q: Why won't just use Doom/Centaur/Spacemacs or any other
    distribution?
  - A: Because they are bloated with a lot of (useless) packages,
    its more easy (IMHO) to adapt vanilla Emacs and learn
    Elisp - once for all (in progress)!

  - Q: Do you think that everyone who uses Emacs should write their own
    configuration file =(init.el)=?
  - A: For sure! It's fun like explore mystical dungeons and slay
    some fearless dragons. The reward? Walk over the rotten and stinky
    carrion of your enemies, who were defeated by your will,
    and contemplate the symphony formed by the cry of despair
    whispered by their widows.

  - Q: Pull requests will be accepted in this repository?
  - A: Probably not, Emacs configurations are too personal,
    fork it or copy any snippet of code that you like:
    MIT License, mate!

* References

  0. https://www.gnu.org/software/emacs/manual
  1. https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html
  3. https://www.gnu.org/software/emacs/manual/html_node/emacs/Keymaps.html
  4. https://cask.readthedocs.io/en/latest
  5. http://www.gigamonkeys.com/book
  6. https://github.com/bbatsov/prelude
  7. https://github.com/larstvei/dot-emacs/blob/master/init.org
  8. https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/emacs-init.org

* LICENSE
  MIT
* EOF

  #+BEGIN_SRC
  And you don't seem to understand
  A shame you seemed an honest man
  And all the fears you hold so dear
  Will turn to whisper in your ear
  #+END_SRC
  | Duvet, Boa |
