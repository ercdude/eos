#+author: esac
#+startup: overview
#+property: header-args :comments yes :results silent

* EOS

  A simple literate programmed Emacs configuration
  that relies on =org-mode=, or a =Elisp= interpreter
  desktop distribution.
  | Wait... What!? |

  In other words, an =Emacs= configuration well designed
  and integrated that provides a generic computer environment
  for everyday use.

* Disclaimer

  I don't recommend anyone to install or use this directly,
  due its lack of support and high volatility, although
  this is probably the final structure it's advisable to
  view this =README= only as a reference/guide for the
  author himself (and some crazy friends, thanks guys,
  I really appreciate all the suggestions and criticism,
  much love and freedom upon your lives)!

  So, here goes a little bit of advice, for everyone: read
  =Emacs/Elisp= manual (RTFM), and use as an exercise writing
  your own ~init.el~, but feel free to fork or copy
  anything from ~src/eos.org~ that you like or find useful.

  Learning =Elisp= may be trick at first, compared to other languages,
  but once you understated the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Evaluation.html][evaluation]] process, everything
  else turns out to be a piece of cake.

  d(-_-)b, nice song!

  It's better to understand, once for all, that as an =Emacs=
  user you automatically become a developer of it,
  =the user developer concept=, that's no way around it,
  unfortunately some people find this overwhelm, others
  find it formidable - myself included!

  Knowing that, maybe you should consider that =Emacs= isn't for you,
  no problem, just move on :)

** Screenshot

   #+CAPTION: EMACS OS
   #+NAME:   fig:EOS-screenshot

   [[./assets/eos.png]]

   | Present Day, heh... Present Time |

* Introduction

  The definition of Emacs given by its official manual can be a
  little bit misleading, after years of experience using it and being
  frustrated to not fully understand its true nature, I decided that
  was time for a good old research, lets say most of the
  studies were not conclusive.

  But as soon as I started to write some =Elisp= code to extend it,
  the answer came to me and the frustration was completely removed.

  So, IMHO =Emacs= should be explained in the following terms:

  A =lisp= interpreter with builtin libraries that provides
  editing and data visualization functionalities.
  The core - the interpreter and basic features -
  are written using the =C= programming language,
  and all the other packages in a =lisp= dialect called
  =Emacs Lisp= generally abbreviated to =Elisp=.

  And now in a =conceptual level= it's easy to see why
  admiration is the only thing left.

  #+BEGIN_SRC
  Don't be fooled by appearances, if you are using Emacs you are
  'inside' the Elisp interpreter, and everything you do is evaluating
  lists, one after another!
  #+END_SRC

  That way it's more clear to the reader that Emacs is not
  a mere text editor and offers a much more richer environment,
  a huge organic ecosystem capable to interact in a very dynamic
  way with any resource of interest.

  =Org-mode= is used to write and organize the configuration
  (~src/eos.org~) in a literate programming format,
  so it contains =Elisp= source code blocks - that will be tangled
  generating the ~src/init.el~ final script - and the
  referent documentation.

  * Note: Throughout this document the word =application=
    refers to any =elisp package= or =external program=.

  It's important to understand that all applications with
  different purposes, made in =Elisp= or not, passes in a
  way or another through the interpreter.

  So again, =application(s)= implies =Elisp packages=
  or =external programs=.

** Goal

   The aim of this project is to provide a generic =IO= bridge
   between the human mind and the machine resources, that are
   managed by the operation system.

** Features:

   - Just one major language (=Elisp=) to conquer them all!
   - Information comes to you as required and not the other way around.
   - The same keybinds are used everywhere (learn once, use forever and ever).
   - The same editing capabilities are used for all applications.
   - The same =GUI Interface= (frames/window/buffers) are used for all applications.

   - Just one integrated development environment for all projects
     (independent of the programming language and tools needed
     to construct it):
     - Apparence
     - Editing
     - Documentation
     - Communication
     - Navigation
     - Completion
     - Syntax/Spell Checking
     - Interpretation
     - Compilation
     - Debugging
     - Testing
     - Rationalization
     - Versioning
     - And more, much more ...

   - Understand that data is generic (in computer science we deal
     with idealize components) and can be manipulated, i.e, transformed
     through different paths.

   - Huge productivity improvements by:
     - Staying focused, surfing all the time in the same pleasant/comfortable mood.
     - Avoiding useless/annoying distractions.
     - Being precise: Just do what was asked and nothing more.
     - Decreasing the gap between a =prof of concept= and the =final= release.
     - Providing tools to easily investigate any process/procedure of
       interest.

   - Intern communication (=pipes, IPCs, data streams, sockets, you
     name it=) between peers are transparent, resulting in a very
     practical, very convenient integration for all modules and
     resources available:
     - Packages
     - Applications
     - Buffers/Windows/Frames
     - Processes
     - Sockets
     - Files
     - Etc ...

* Dependencies

  1. Cask
  2. Emacs >= 26.3
  3. Elisp Packages
     - Listed on: ~.gitmodules~
  4. Non-elisp Packages
     - Ag, The Silver Searcher
     - Global
     - Etags
     - Aspell (or Ispell)
     - Compton
     - Transset

* Tested on

  - FreeBSD 12.1 RELEASE
  - Debian GNU/Linux 10

* Installation

  * NOTE: The installation script it's incomplete and broken do not
    use it!

  Download and execute the installation shell script (SH POSIX), the
  example below uses curl.

  #+BEGIN_SRC
     sh -c "$(curl -fsSL https://raw.githubusercontent.com/esac-io/eos/master/scripts/install.sh)"
  #+END_SRC

  Steps performed by the script:

  1. Check dependencies
  2. Clone =eos= and sub-module repositories (TODO!)
  3. Backup ~.emacs.d~ directory
  4. Byte compile third-party =Elisp= packages (TODO!)
  5. Tangle source code from ~src/eos.org~ to ~init.el~
  6. Byte compile ~init.el~ script
     - Call make passing the right =Makefile= to it.

* Usage

  Using this Emacs configuration isn't different of using
  vanilla Emacs itself with a "few" reforms.
  As such, the official Emacs tutorial is a great way
  to understanding a little bit of its universe.

  So, open Emacs and press =C-h= (the help map prefix) and
  press =t= to evaluate ~help-with-tutorial~ function that will
  start the interactive tutorial.

  - Enjoy your late nights :)

  - Note: The main purpose of the Emacs tutorial is teach you
  the most important standard Emacs commands (or functions)
  and the mapped keybinds used to trigger then.

* Keybinds

  Basically, new prefix maps are created for the most commonly
  used minor modes and their functions are mapped within
  their respective maps.

  After that, the prefix maps will be placed in the =Ctl-x-map=
  prefix, resulting in the standardization of commands (functions)
  access sequences - =keybinds= or =chords=.

  For the sake of sanity a lot of keybinds have been cleaned up,
  it's preferable (IMHO) a small set of keybinds,
  only the most used ones, providing that way a more stable, less
  error prone, overall usability.

  When 'exotic' functions needed to be called, just use
  =execute-extended-command= binded to =M-x=, also know as the
  =minibuffer=.

  Note: The =minor-mode-map-alist= was completely erased, this was
  proven to be a huge pain relief resulting in a considerable
  productivity gain.

  For more information checkout the =Cleanup= section at
  ~src/eos.org~.

** Basic

   If you do not understand the terminology of the tables below,
   it is advisable to read the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html][emacs keybinds manual]].

**** Fundamental

     | Keyboard | Emacs Notation | Description |
     |          |                |             |
     | Alt      | M-             | Meta Key    |
     | Crtl     | C-             | Command Key |

**** Keymaps

     Keymaps are data structures that holds key sequences (chords) and
     map/trigger commands (elisp functions).

     | Keymap           | Prefix Key | Available | Description        |
     |                  |            |           |                    |
     | Global-map       | C- and M-  | Always    | Generic Actions    |
     | Ctl-x-map        | C-x        | Always    | Generic Actions    |
     | <Minor-mode>-map | C-x <key>  | Always    | Minor Mode Actions |
     | <Major-mode>-map | C-c        | Maybe     | Major Mode Actions |

** Help

   To verify what keys are mapped use =M-x describe-bindings RET=
   or =C-h b=, it's possible to restrict the search using =C-h= or =?=
   post-fix for a specific map, e.g:

   | Keybind | Description           |
   | C-h C-h | help-map help         |
   | C-c C-h | <major>-mode-map help |
   | C-x C-h | ctl-x-map help        |
   | C-x l ? | <minor>-mode-map help |

** C-x

   New keymaps are defined to hold the most
   common/used commands (elisp functions), they are
   divided according to their behavior classification:

   | Prefix Keymap  | Prefix  | Description  |
   |                |         |              |
   | eos-files-map  | C-x f   | Files        |
   | eos-window-map | C-x w   | Windows      |
   | eos-pm-map     | C-x p   | Projects     |
   | eos-sc-map     | C-x e   | Errors       |
   | eos-tags-maps  | C-x t   | Tags         |
   | eos-docs-maps  | C-x l   | Library/Docs |
   | eos-utils-map  | C-x c   | Utilities    |
   | eos-ac-map     | C-x TAB | Completion   |

** C-c

   Some maps will be only used in specific modes,
   e.g, cc-mode:

   | Mode  | Keymap    | Prefix | Description |
   |       |           |        |             |
   | C/C++ | rtags-map | C-c r  | Rtags       |

** Global

   Not all keybinds will be listed here, just the keybinds that
   have changed from the standard and the most used ones.

   Remember that you always can call the functions =C-h k= (describe-key)
   and =C-h b= (describe-bindings) to require this information.

   | Keymap | Keybind | Function                     |
   | Global | C-a     | back-to-indent-or-line       |
   | Global | C-M-v   | scroll-other-window          |
   | Global | C-M-y   | scroll-other-window-down     |
   | Global | M-i     | indent-region-or-buffer      |
   | Global | M-c     | comment-or-uncomment-region  |
   | Global | M-j     | clone-current-line-or-region |
   | Global | M-n     | transpose-lines-up           |
   | Global | M-p     | transpose-lines-down         |
   | ...    | ...     | ...                          |

* Packages

  Packages are installed as git sub-modules (see gitsubmodules(7) - man
  pages for more information) and they are listed on ~.gitmodules~ file.

* Adapt

  If you want to modify any aspects (or extend) this configuration
  without touching the ~/src/eos.org~, just edit/add your own =Elisp=
  code inside ~/src/trash.el~.

  Note: ~src/trash.el~ will be the last script loaded by ~/src/trash.el~.

* Advises

  0. Do one thing and do it well (Unix philosophy).
  1. If something is bothering you, fix it!
  2. Global behavior aways available and static.
  3. Few keybinds sets.

  4. Repeat keybinds postfix for mode-specific commands
     according to their logical classification.

  5. Use the same action flow logic, for the same
     class of commands.

  6. Use as few modules (packages) as possible and always try to use
     modules already installed on Emacs to meet your needs.
     If you can withdraw a module, do so! Most of the time it
     takes little or no effort, and the gain is considerable.
     So, be alert to identify these situations!

  7. Prioritize Emacs's native packages (builtin) over third-party
     ones. If any demand comes to light try to resolve
     with these packages first, then third-party packages already
     installed and finally (maybe, a huge one) the internet.
     Sometimes a little extension on this blotted-packages sets
     are everything needed to bring a new feature to live or
     resolve a issue.

  8. Successive refinements: in constant refactoring!
     Always improve, never fear the winds of change!

  9. Have fun!

* FAQ

  - Q: Mac/Windows will be supported any time soon?
  - A: Nope.

  - Q: Why don't you use =evil/hydra/which-key/use-package/etc=?
  - A: It is not just a matter of taste, it is simply because
    they get in the way disturbing the desired transformation to
    occur, and I prefer a more direct/effective approach.
    Remember that's the way I think, you can add these modules
    on your own and make your life a little more miserable,
    be my guess!

  - Q: And what about =helm/ivy/counsel/swiper=?
  - A: Well, Icomplete its minimal (works very similar to the beloved
    dmenu), builtin, generic, fast, less intrusive, and fulfill
    all my needs, thanks Prot, to bring this forgotten package to light!

  - Q: Do you think Emacs has a future?
  - A: Maybe, as was already said the =concept= of the lisp
    machine as the main interface to be used for any task is great,
    however the =execution= side of it is a complete mess,
    open the =info buffer= and you will see what I mean.
    This lack of organization makes everything more difficult that
    has to be, and one day - if we don't do anything - the whole
    project may become unmanageable - sad, dudes! :/, let's do
    SOMETHING about it! :D

  - Q: Why won't just use =Doom/Centaur/Spacemacs= or any other
    distribution?
  - A: Because they are bloated with a lot of useless packages,
    its more easy IMHO to adapt vanilla Emacs and learn
    =Elisp= - once for all (working in progress)!

  - Q: Do you think that everyone who uses Emacs should write their own
    configuration file =(init.el)=?
  - A: For sure! It's fun like explore mystical dungeons and slay
    some fearless dragons. The reward? Walk over the rotten and stinky
    carrion of your enemies, who were defeated by your will,
    and contemplate the symphony formed by the cry of despair
    whispered by their widows.

  - Q: Pull requests will be accepted in this repository?
  - A: Probably not, Emacs configurations are too personal,
    fork it or copy any snippet of code that you like:
    MIT License, mate!

* References

  0. https://www.gnu.org/software/emacs/manual
  1. https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html
  3. https://www.gnu.org/software/emacs/manual/html_node/emacs/Keymaps.html
  4. https://cask.readthedocs.io/en/latest
  5. http://www.gigamonkeys.com/book
  6. https://github.com/bbatsov/prelude
  7. https://github.com/larstvei/dot-emacs/blob/master/init.org
  8. https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/emacs-init.org

* LICENSE
  MIT
* EOF

  #+BEGIN_SRC
  And you don't seem to understand
  A shame you seemed an honest man
  And all the fears you hold so dear
  Will turn to whisper in your ear
  #+END_SRC
  | Duvet, Boa |
