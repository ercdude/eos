* EOS

  Just another org-mode based emacs configuration,
  or a elisp interpreter desktop distribution.

* Demo
  # ** TODO Add demo link
  # ** TODO Add screen-shot
* Introduction

  Using emacs (elisp interpreter) as the only IO bridge
  between human and machine. In another words, a emacs configuration
  well design and integrated, that provides a generic
  computer environment for everyday use.

  We rely on org-mode to organize the whole configuration in a logic and
  manageable way, so the source code and its documentation are contained
  in only one file: ~init.org~.

  # ** TODO List resumed features

* Dependencies

  1. Cask
  2. Emacs >= 26.3

* Installation

  Download and execute the installation script:

  #+BEGIN_SRC
     sh -c "$(curl -fsSL https://github.com/esac-io/eos/scripts/install.sh)"
  #+END_SRC

  Script steps:

  1) Check dependencies
  2) Clone Cask and EOS repositories
  3) Backup ~.emacs.d~ directory
  4) Install third-party packages: ~Cask~
  5) Build and compile: ~init.org~

* Usage

  Using this emacs configuration is like using emacs vanilla itself
  with a “few” reforms.  As such, the official interactive emacs
  tutorial is a great way to start to understanding a little
  bit of the emacs universe.

  So, open emacs and press =C-h= and wait =0.2 ms=, the which-key
  popup will bring to you the help options available,
  press =t= to start the tutorial.

  And, just enjoy your late nights :)

  - Note: Some keybinds will be not the same, in the next session
    will be available a overview on how we map elisp functions (keybind).

** Keybinds

   Basically, new prefix maps are created for the most commonly
   used minor modes and their functions are mapped within
   their respective maps.

   After that, the prefix maps will be placed in the Ctl-x-map prefix
   map, resulting in the standardization of command
   (function) access sequences.

*** Basic

    If you do not understand the terminology of the tables below,
    it is advisable to read the emacs manual in the sections on
    keys and keymaps.

    - TIP: =C-h r= (info-emacs-manual)

*** Standard

    | Key        | Prefix | Description    |
    |            |        |                |
    | Meta (Alt) | M-     | Global Meta    |
    | Crtl       | C-     | Global Command |
    - Table 1.0 (Emacs Basic Prefix)

    | Keymap    | Prefix    | Available       |
    |           |           |                 |
    | Ctl-x-map | C-x       | Always (Global) |
    | minor-map | C-x <key> | Always (Global) |
    | major-map | C-c       | Maybe* (Major)  |
    - Table 1.1 (Emacs Basic Action Prefix)

    - TIP: Maybe*, means, depends on the current major mode

*** C-x

    We define some new keymaps prefix, where the most
    common and used functions will be placed.
    The functions are divided between prefix keymaps
    according to their logical functionality and the mode in
    which they were defined.

    | Prefix Keymap         | Prefix | Description |
    |                       |        |             |
    | window-prefix-map     | C-x w  | Window      |
    | projectile-prefix-map | C-x p  | Projects    |
    | flycheck-prefix-map   | C-x e  | Errors      |
    | tags-prefix-map       | C-x t  | Tags        |
    | dash-prefix-map       | C-x l  | Library     |
    | complete-prefix-map   | M-`    | Complete    |

    - Table 1.2 (Global Prefix Keymaps)

    - Note: The complete-prefix-map =M-`= are the only
      prefix that does not follow the specified pattern.

*** C-c

    Some maps will be used only in specific modes,
    like cc-mode for example:

    | Mode  | Keymap    | Prefix | Description |
    |       |           |        |             |
    | C/C++ | rtags-map | C-c r  | Rtags       |

    - Table 1.2

*** Global

    We are not going to list all the keybinds, just the keybinds we
    have changed from the standard and some additional ones that we
    think are important.

    You can always use the functions =C-h k= (describe-key) and
    =C-h b= (describe-bindings) to require this information.

    # **** TODO: Table!

    | Keymap | Keybind | function |
    |        |         |          |
    - Table 1.3 (Global-map)

* Applications
  # ** TODO List and summarize apps
  # ** TODO Short by app classification
* Package Manager
** Add

   To add your on packages just edit =~/.emacs.d/Cask= file,
   you have to add something like this on it:

   #+BEGIN_SRC sh

   (depends-on "<package-name>")

   #+END_SRC

   See Cask documentation[7] for more information.

** Remove
*** Manually

    You have to manually remove the packages directory from
    Cask's package-directory, just use the following command
    to figure it out where your packages are.

    #+BEGIN_SRC sh

    cd ~/.emacs.d; cask package-directory

    #+END_SRC

    And then remove/move the package's directory.

    Important: If the directory is not removed or moved
    ~init.org~ will continue to load and configure it.

* Miscellaneous
** A user story
** Advices

   1. Do one thing and do it well.
   2. If something is bothering you, fix it!
   3. Global behavior aways available and static.
   4. Few keybinds sets.

   5. Repeat keybinds for mode-specific commands
      according to their logical classification.

   6. Use popup menus, action-remember-action cycle.

   7. Use the same action flow logic, for the same class of commands.
      Habits die hard (increases the usability!).

   8. Use as few modules(packages) as possible and always try to use
      modules already installed on emacs to meet our needs. If we can
      withdraw a module, do so! Most of the time it takes little
      or no effort, and the gain is considerable.
      So be alert to identify these situations!

   9. Prioritize emacs's native packages(buildin) over third-party.
      If any demand comes to light try to resolve with these packages
      first, then third-party packages already installed and
      finally(maybe) the internet. Sometimes a little extension
      on this blotted-packages sets, are everything we need to
      bring a new feature to live or resolve a issue.

   10. Successive refinements: in constant refactoring!
       Always improve, do not fear the winds of change!

* References

  1. https://www.gnu.org/software/emacs/manual
  2. http://www.gigamonkeys.com/book
  3. https://github.com/bbatsov/prelude
  4. https://cask.readthedocs.io/en/latest
  5. https://www.gnu.org/software/emacs/manual/html_node/emacs/Keymaps.html
  6. https://github.com/seagle0128/.emacs.d
  7. https://github.com/larstvei/dot-emacs/blob/master/init.org
  8. https://zzamboni.org/post/my-emacs-configuration-with-commentary

* LICENSE
  MIT

* EOF

  I feel confined, only free to expand myself within boundaries.
  |puppet master|
