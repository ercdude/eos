* EOS

  Just another emacs configuration, or a elisp interpreter
  desktop distribution.

* Demo
  # ** TODO Add demo link
  # ** TODO Add screen-shot
* Introduction

  Using emacs (lisp interpreter) as the only IO bridge
  between human and machine. In another words, a emacs configuration
  well design and integrated, that provides a generic
  computer environment for everyday use.

  We rely on org-mode to organize the whole configuration in a logic and
  manageable way, so the source code and its documentation are contained
  in only one file: ~init.org~.

  # ** TODO List resumed features

* Dependencies

  1. Cask
  2. Emacs >= 26.3

* Installation
* Build (Compile)
* Usage

  Using this emacs configuration is like using emacs vanilla itself
  with a “few” reforms.  As such, the official interactive emacs
  tutorial is a great way to start to understanding a little
  bit of the emacs universe.

  So, open emacs and press =C-h= and wait =0.2 ms=, the which-key
  popup will bring to you the help options available,
  press =t= to start the tutorial.

  And, just enjoy your late nights :)

  - Note: Some keybinds will be not the same, in the next session
    will be available a overview and how we map your functions.

** Keybinds

   Basically we create new maps (prefixs) to the minor
   modes that we use, and we put them in Ctl-x-map.
   Thus, the command access sequences become standardized.

*** Basic

    If you do not understand the terminology of the tables below,
    it is advisable to read the emacs manual on keys =C-h r=
    (info-emacs-manual) and keymaps[8].

    | Key        | Prefix | Description    |
    | Meta (Alt) | M-     | Global Meta    |
    | Crtl       | C-     | Global Command |
    - Table 1.0

    | Keymap    | Prefix    |
    | Ctl-x-map | C-x       |
    | minor-map | C-x <key> |
    | major-map | C-c       |
    - Table 1.1

*** Global Prefix

    We define some new keymaps prefix, where the most
    common and used functions will be placed.
    The functions are divided between prefix keymaps
    according to their logical functionality and the mode in
    which they were defined.

    | Prefix Keymap         | Prefix | Description |
    |                       |        |             |
    | window-prefix-map     | C-x w  | Window      |
    | projectile-prefix-map | C-x p  | Projects    |
    | flycheck-prefix-map   | C-x e  | Errors      |
    | tags-prefix-map       | C-x t  | Tags        |
    | dash-prefix-map       | C-x l  | Library     |
    | complete-prefix-map   | M-`    | Complete    |

    - Table 1.2 (Global Prefix Keymaps)

    [Note: The (minor) complete =M-`= uses a prefix
    which does not follow the specified pattern.

*** Major Prefix

    Some maps will be used only in specific modes,
    like cc-mode for example:

    | Mode  | Keymap    | Prefix | Description |
    |       |           |        |             |
    | C/C++ | rtags-map | C-c r  | Rtags       |

    - Table 1.2

*** Global Keybinds

    We are not going to list all the keybinds, just the keybinds we
    have changed from the standard and some additional ones that we
    think are important.

    You can always use the functions (describe-key) =C-h k= and
    (describe-bindings) =C-h b= to require this information.

**** TODO: Table!

     | Keymap | Keybind | function |
     |        |         |          |
     - Table 1.3 (Global-map)

* Applications
  # ** TODO List and summarize apps
  # ** TODO Short by app classification
** Misc
*** Which-key

    I like to think of this package as a guiding map among
    the available keybindds. It's usability is quite simple,
    just press any keybinds sequence, e.g, =C-x=,
    and wait a litle bit, if the sequence is a prefix
    it will open a menu with the list of possible keys from
    the prefix entered.

    Inside a which-key prefix (popup) you can enter in other
    prefixs (parent or childs). So, as you can see, it's like
    a visual map.

    [ TIP: If you want to visit a parent prefix, just hit =C-h u <up>=
    inside the which-key popup ]

    [ TIP: Within which-key popup press =C-h= (help) and explore its
    options ]

* Package Manager
** Add

   To add your on packages just edit =~/.emacs.d/Cask= file,
   you have to add something like this on it:

   #+BEGIN_SRC sh

   (depends-on "<package-name>")

   #+END_SRC

   See Cask documentation[7] for more information.

** Remove
*** Manually

    You have to manually remove the packages directory from
    Cask's package-directory, just use the following command
    to figure it out where your packages are.

    #+BEGIN_SRC sh

    cd ~/.emacs.d; cask package-directory

    #+END_SRC

    And then remove/move the package's directory.

    Important: If the directory is not removed or moved
    ~init.org~ will continue to load and configure it.

* Miscellaneous
** A user story
** Advices

   1. Do one thing and do it well.
   2. If something is bothering you, fix it!
   3. Global behavior aways available and static.
   4. Few keybinds sets.

   5. Repeat keybinds for mode-specific commands
      according to their logical classification.

   6. Use popup menus, action-remember-action cycle.

   7. Use the same action flow logic, for the same class of commands.
      Habits die hard (increases the usability!).

   8. Use as few modules(packages) as possible and always try to use
      modules already installed on emacs to meet our needs. If we can
      withdraw a module, do so! Most of the time it takes little
      or no effort, and the gain is considerable.
      So be alert to identify these situations!

   9. Prioritize emacs's native packages(buildin) over third-party.
      If any demand comes to light try to resolve with these packages
      first, then third-party packages already installed and
      finally(maybe) the internet. Sometimes a little extension
      on this blotted-packages sets, are everything we need to
      bring a new feature to live or resolve a issue.

   10. Successive refinements: in constant refactoring!
       Always improve, do not fear the winds of change!

* References

  1. https://www.gnu.org/software/emacs/manual
  2. http://www.gigamonkeys.com/book
  3. https://github.com/bbatsov/prelude
  4. https://github.com/seagle0128/.emacs.d
  5. https://github.com/larstvei/dot-emacs/blob/master/init.org
  6. https://zzamboni.org/post/my-emacs-configuration-with-commentary
  7. https://cask.readthedocs.io/en/latest
  8. https://www.gnu.org/software/emacs/manual/html_node/emacs/Keymaps.html

* LICENSE
  MIT

* EOF

  ... Present day, present time ...

  /me "I feel confined, only free to expan myself within boundaries."
