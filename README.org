#+author: esac
#+startup: overview
#+property: header-args :comments yes :results silent

* EOS

  Just another org-mode, elisp, emacs configuration,
  or a elisp interpreter desktop distribution.
  | Wait... What!? |

** Screenshot

   #+CAPTION: EMACS OS
   #+NAME:   fig:EOS-screenshot

   [[./assets/eos.png]]

   | Present Day, heh... Present Time |

* Introduction

  Using Emacs (Elisp interpreter) as the only IO bridge
  between human and machine. In another words, an emacs configuration
  well designed and integrated that provides a generic
  computer environment for everyday use.

  Org-mode is used to organize the load-set cycle in
  just one file ~src/init.org~. It contains source code blocks,
  that will be tangled, generating ~src/init.el~ script file.

  * Note: Throughout this document the word =application(s)= and
    refers to any =elisp packages= or =external programns=.

  Its important to understand that all applications with
  different purposes and classification (made using elisp or
  not) (in)directly passes through the Elisp interpreter.

  So again, =application(s)= equals =elisp packages= or =external programns)=.

** Features (overview):

   - Just one major language (Elisp) to conquer them all!
   - Information comes to you as required and not the other way around.
   - Use the same keybinds everywhere (learn once, use forever and ever).

   - Use the same editor capabilities for all applications
     (or at least try to).

   - Use the same =GUI Interface= (frames/window/buffers) for all
     applications.

   - Just one development environment for all languages:
     - Editing
     - Navigation
     - Completion
     - Syntax check
     - Spell check
     - Syntax Highlight
     - Documentation access
     - Compilation / Interpretation
     - Testing
     - Debugging
     - Versioning
     - Rationalization
     - Measurement

   - Understand that data is generic (in computer science we deal
     with idealize components) and can be manipulated (transformed)
     through different paths.

   - Huge improvements in productivity:
     - Stay focused, surfing in the same pleasant/comfortable
       flow (my preferred kind of mood).
     - No useless/annoying distractions.
     - Just do what was asked and nothing more.

   - Decrease the gap between: =a prof of concept - "final" release!=

   - Provide tools to easily investigate any process/procedure of
     interest.

   - Communication between peers are transparent, proving easy
     integration for any module (streaming of data):
     - Packages
     - Buffers/Windows/Frames
     - External applications

* Dependencies

  1. Cask
  2. Emacs >= 26.3
  3. Emacs Packages (Optional):
     - Will be described and listed in the =Applications= section.

** Optional

   Some =emacs packages= used in this configuration require
   external (non-lisp) programs:

   1. agrep
   2. global
   3. aspell (or ispell)
   4. compton
   5. transset
   6. rtags (server)
   7. irony (server)

* Tested On

  - FreeBSD 12.1 RELEASE
  - Debian GNU/Linux 10

* Installation

  Download and execute the installation script:

  #+BEGIN_SRC
     sh -c "$(curl -fsSL https://raw.githubusercontent.com/esac-io/eos/master/scripts/install.sh)"
  #+END_SRC

  Script steps:

  1) Check dependencies
  2) Clone =cask= and =eos= repositories
  3) Backup ~.emacs.d~ directory
  4) Install third-party packages listed in ~/src/Cask~ file
  5) Build and compile: ~src/init.org~

* Usage

  Using this Emacs configuration isn't different of using
  Emacs vanilla itself with a "few" reforms.
  As such, the official Emacs tutorial is a great way to understanding
  a little bit of its universe.

  So, open Emacs and press =C-h= (the help map prefix) and
  press =t= to evaluate ~help-with-tutorial~ function that will
  start the interactive tutorial.

  - Enjoy your late nights :)

  - Note: The main purpose of the Emacs tutorial is teach you
    the most important standard Emacs commands and the mapped
    keybinds used to trigger then.

  - Key binds -> Functions : (-> means map)

  - Remember everything (literally, `every-fuck-thing) is a function inside
    the lisp interpreter (elisp).

* Keybinds Strategy

  Basically, new prefix maps are created for the most commonly
  used minor modes and their functions are mapped within
  their respective maps.

  After that, the prefix maps will be placed in the Ctl-x-map prefix
  map, resulting in the standardization of commands (functions)
  access sequences (keybinds/chords).

** Basic

   If you do not understand the terminology of the tables below,
   it is advisable to read the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html][emacs keybinds manual]].

**** Fundamental

     | Keyboard | Emacs Notation | Description |
     |          |                |             |
     | Alt      | M-             | Meta Key    |
     | Crtl     | C-             | Command Key |

**** Keymaps (data structures)

     Keymaps are data structures that holds key sequences (chords) and
     commands (elisp functions).

     | Keymap           | Prefix Key | Available         | Description        |
     |                  |            |                   |                    |
     | Global-map       | C- and M-  | Always (static)   | Generic Actions    |
     | Ctl-x-map        | C-x        | Always (static)   | Generic Actions    |
     | <Minor-mode>-map | C-x <key>  | Always (static)   | Minor Mode Actions |
     | <Major-mode>-map | C-c        | Current (dynamic) | Major Mode Actions |

** C-x

   EOS's keymaps are defined to hold the most
   common/used commands (elisp functions), they are
   divided according to their logical behavior:

   | Prefix Keymap  | Prefix  | Description       |
   |                |         |                   |
   | eos-window-map | C-x w   | Windows           |
   | eos-pm-map     | C-x p   | Projects          |
   | eos-sc-map     | C-x e   | Errors (Checkers) |
   | eos-tags-maps  | C-x t   | Navigation (Tags) |
   | eos-docs-maps  | C-x l   | Library (Docs)    |
   | eos-ac-map     | C-x TAB | Completion        |

** C-c

   Some maps will be only used in specific modes,
   e.g, cc-mode:

   | Mode  | Keymap    | Prefix | Description |
   |       |           |        |             |
   | C/C++ | rtags-map | C-c r  | Rtags       |

** Global

   We are not going to list all the keybinds, just the keybinds we
   have changed from the standard and some additional ones that we
   think are important.

   Remember that you always can call the functions =C-h k= (describe-key)
   and =C-h b= (describe-bindings) to require this information.

   | Keymap | Keybind | Function                                  |
   | Global | C-a     | eos/move/beginning-of-line                |
   | Global | C-M-v   | scroll-other-window                       |
   | Global | C-M-y   | scroll-other-window-down                  |
   | Global | M-i     | eos/edit/indent-region-or-buffer          |
   | Global | M-c     | comment-or-uncomment-region               |
   | Global | M-j     | eos/edit/duplicate-current-line-or-region |
   | Global | M-n     | eos/edit/move-lines-up                    |
   | Global | M-p     | eos/edit/move-lines-down                  |
   | ...    | ...     | ...                                       |

** Getting help

   To verify what keys are mapped use list-keybindings
   (M-x list-keybindings RET or C-h b), it's possible to restrict
   the search using C-h (or ?) post-fix for a specific map, e.g:

   | Keybind | Description           |
   | C-h C-h | help-map help         |
   | C-c C-h | <major>-mode-map help |
   | C-x C-h | ctl-x-map help        |
   | C-x l ? | <minor>-mode-map help |

** Quality of life

   For the sake of sanity a lot of keys were unbounded resulting
   in a more error prone Emacs usage. See the unbind section at
   ~init.org~ file and comment out your missing chords.

   Note: The `minor-mode-map-alist' was completely cleaned,
   this was proven to be a huge gain on productivity and pain relief.

* Package Management

  Cask is a project management tool for Emacs that helps automate the
  package development cycle; development, dependencies, testing,
  building, packaging and more.

  Cask can also be used to manage dependencies for your
  local Emacs configuration.

  Itâ€™s based on a ~Cask~ file, which identifies an Emacs Lisp package,
  provides meta information about the package and
  declares its contents and dependencies.

** Adding Package's Repository

   To add more packages just edit the ~/.emacs.d/Cask~ file, generated
   by installation script.

   To add 'function-args' package, put the code snippet below inside
   the ~Cask~ file.

   #+BEGIN_SRC sh

   (depends-on "function-args")

   #+END_SRC

   Using different source then Melpa is possible thanks to =`depends-on'=
   acceptable fetcher keywords:

   #+BEGIN_SRC sh

   (depends-on "undo-tree"
    :git "http://www.dr-qubit.org/git/undo-tree.git")

   #+END_SRC

   In the first variant, install the package from a package archive,
   optionally requiring a minimum-version. In the second variant,
   install the package from a VCS repository.
   Replace fetcher with any of the following: :git, :bzr, :hg,
   :darcs, :svn or :cvs. The argument is the package's repository URL
   source.

   For more detailed information see [[https://cask.readthedocs.io/en/latest/guide/usage.html][cask's manual]].

** Installing Packages

   To install all packages listed on the ~Cask~ file, use `cask
   install` inside the same directory the ~Cask~ file resides, e.g:

   #+BEGIN_SRC sh

   $ cd ~/emacs.d; cask install

   #+END_SRC

   - Tip: When problems with missing dependencies are encountered
     (usually happens when using fetcher keyword like :git),
     put the dependency code snippet ~(depends-on "missing-dep-package-name")
     above the target package and give `cask install` command another shot.

** Removing Packages

   Manually remove target package directory.
   To find out where the packages were installed, use:

   #+BEGIN_SRC sh

   $ find ~/.emacs.d/.cask -type d -name <package-name>*

   #+END_SRC

   To avoid package re-installation remove (depends-on
   <package-name>) before `cask install` calls.

   Delete package's folder:

   #+BEGIN_SRC emacs-lisp

   $ rm -rf ~/.emacs.d/.cask/26.3/elpa/dashboard-20200225.745

   #+END_SRC

   In this example, dashboard package files will be deleted,
   its configuration will be skipped.

   - TIP: IMPORTANT! Don't forgot to remove both: package's folder and
     repository entry, otherwise the package will continue to be
     installed/loaded.

* Adapt

  If you want to modify any aspects (or extend) this configuration
  without touching the ~/src/init.org~, just edit/add your own elisp code
  at ~/src/adapt.el~, this file is the last thing loaded on
  the ~/src/init.el~ tangled script.

* Applications

  Well like was said, this configuration is used as a desktop
  distribution. The application list (organized by its classification)
  can be found at ~docs/apps.org~ and, of course, its configurations (if any) are
  written in the ~src/init.org~ file.

* Miscellaneous
** Advices

   1. Do one thing and do it well.
   2. If something is bothering you, fix it!
   3. Global behavior aways available and static.
   4. Few keybinds sets.

   5. Repeat keybinds for mode-specific commands
      according to their logical classification.

   6. Use the same action flow logic, for the same class of commands.
      Habits die hard (usability - KISS!).

   7. Use as few modules(packages) as possible and always try to use
      modules already installed on emacs to meet your needs.
      If we can withdraw a module, do so! Most of the time it takes little
      or no effort, and the gain is considerable.
      So be alert to identify these situations!

   8. Prioritize emacs's native packages(builtin) over third-party.
      If any demand comes to light try to resolve with these packages
      first, then third-party packages already installed and
      finally(maybe) the internet. Sometimes a little extension
      on this blotted-packages sets are everything we need to
      bring a new feature to live or resolve a issue.

   9. Successive refinements: in constant refactoring!
      Always improve, do not fear the winds of change!

* FAQ

  - Q: Mac/Windows will be supported any time soon?
  - A: Nope.

  - Q: Why don't you use evil/hydra/which-key/use-package/etc?
  - A: It is not just a matter of taste, it is simply because
    they get in the way disturbing the desired transformation to
    occur, and I prefer a more direct/effective approach.
    Remember thatâ€™s the way I think, you can add these modules
    on your own and make your life a little more miserable, be my guess!

  - Q: And what about helm/ivy/counsel/swiper?
  - A: Well, Icomplete its minimal (works very similar to the beloved
    dmenu), builtin, generic, fast, less intrusive, and fulfill
    all my needs, thanks Protesilaos, to bring this
    forgotten package to light!

  - Q: Why won't just use Doom/Centaur/Spacemacs or any other
    distribution?
  - A: Because they are bloated with a lot of (useless) packages,
    its more easy (for me) to adapt Emacs Vanilla and learn Elisp:
    once for all (in progress)!

    "One language to conquer than all!"
    | kernel: Oops |

  - Q: Do you think that everyone who uses Emacs should make their own
    configuration ~init.el~?
  - A: For sure! It's fun like explore mystical dungeons and slay
    some horrible dragons. The reward? Walk over the rotten and stinky
    carrion of your enemies, who were defeated by your will,
    and contemplate the symphony formed by the cry of despair
    whispered by their widows.

  - Q: Pull requests will be accepted in this repository?
  - A: Probably not, Emacs configurations are too personal,
    fork it or copy any snippet of code that you like:
    MIT License, mate!

* References

  1. https://www.gnu.org/software/emacs/manual
  2. http://www.gigamonkeys.com/book
  3. https://github.com/bbatsov/prelude
  4. https://cask.readthedocs.io/en/latest
  5. https://www.gnu.org/software/emacs/manual/html_node/emacs/Keymaps.html
  6. https://github.com/larstvei/dot-emacs/blob/master/init.org
  7. https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/emacs-init.org

* LICENSE
  MIT
* EOF

  #+BEGIN_SRC
  And you don't seem to understand
  A shame you seemed an honest man
  And all the fears you hold so dear
  Will turn to whisper in your ear
  #+END_SRC
  | Duvet, Boa |
