;;; init.el --- Virtual Lisp Machine Configuration (init.el)

;;; Commentary:

;; ... Present day, present time ....

;;; Code:

;;; -*- lexical-binding: t -*-

(when (version< emacs-version "26.3")
  (error "This requires Emacs 26.3 and above!"))

(require 'loaddefs)

;; threshold inital value
(setq gc-cons-threshold most-positive-fixnum) ; 2^61 bytes

;; yes or no
(defalias 'yes-or-no-p 'y-or-n-p)

(defvar saved-file-name-handler-alist
  file-name-handler-alist
  "Save `file-name-handler-alist' variable.")

(defvar vlm-window-map
  (make-sparse-keymap)
  "Window commands keymap.")

(defvar vlm-tags-map
  (make-sparse-keymap)
  "Tags (navigation) commands keymap.")

(defvar vlm-tabs-map
  (make-sparse-keymap)
  "Tabs (navigation) commands keymap.")

(defvar vlm-pm-map
  (make-sparse-keymap)
  "Project management commands keymap.")

(defvar vlm-sc-map
  (make-sparse-keymap)
  "Syntax check commands keymap.")

(defvar vlm-completion-map
  (make-sparse-keymap)
  "Completion commands keymap.")

(defvar vlm-docs-map
  (make-sparse-keymap)
  "Docs commands keymap.")

(defvar vlm-files-map
  (make-sparse-keymap)
  "Files commands keymap.")

(defvar vlm-debug-map
  (make-sparse-keymap)
  "Debug commands keymap.")

(defvar vlm-filter-map
  (make-sparse-keymap)
  "Filter commands keymap.")

(defvar vlm-utils-map
  (make-sparse-keymap)
  "Utils commands keymap.")

(defvar vlm-media-map
  (make-sparse-keymap)
  "Media commands keymap.")

(dolist (prefix-map '(vlm-tags-map
                      vlm-tabs-map
                      vlm-pm-map
                      vlm-sc-map
                      vlm-docs-map
                      vlm-files-map
                      vlm-filter-map
                      vlm-utils-map
                      vlm-window-map
                      vlm-media-map
                      vlm-completion-map))
  (define-prefix-command prefix-map))

;; vlm prefix maps
(define-key ctl-x-map (kbd "f") 'vlm-files-map) ;; files
;; (define-key ctl-x-map (kbd "") 'vlm-filter-map)
(define-key ctl-x-map (kbd "p") 'vlm-pm-map) ; project
(define-key ctl-x-map (kbd "t") 'vlm-tags-map) ; tags
(define-key ctl-x-map (kbd "C-o") 'vlm-tabs-map) ; tabs
(define-key ctl-x-map (kbd "c") 'vlm-utils-map) ; commands
(define-key ctl-x-map (kbd "e") 'vlm-sc-map) ; errors
(define-key ctl-x-map (kbd "l") 'vlm-docs-map) ; library
(define-key ctl-x-map (kbd "v") 'vlm-media-map) ; media
(define-key ctl-x-map (kbd "<tab>") 'vlm-completion-map) ; tab - complete

;; clean file-name-handler-alist
(setq file-name-handler-alist nil)

;; restore file-name-handler-alist
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist
                  saved-file-name-handler-alist)))

;; non-nil inhibits the startup screen
;; this variable is an alias for `inhibit-startup-screen'
(customize-set-variable 'inhibit-startup-message t)

;; non-nil inhibits the initial startup echo area message
(customize-set-variable 'inhibit-startup-echo-area-message nil)

;; email address of the current user
(customize-set-variable 'user-mail-address "eirc.m@protonmail.com")

;; (require 'warnings nil t)

;; minimum severity level for displaying the warning buffer
(customize-set-variable 'warning-minimum-level :error)

;; minimum severity level for logging a warning.
(customize-set-variable 'warning-minimum-log-level :warning)

(setq load-prefer-newer noninteractive)

;; the email address of the current user
;; (customize-set-variable 'user-mail-address nil)

;; the full name of the user logged in.
(customize-set-variable 'user-full-name (getenv "USER"))

;; generated by `update-directory-autolods'
(require 'lisp-loaddefs nil t)

;; (require 'gcmh nil t)

;; non-nil means print a message when garbage collecting
(customize-set-variable 'gcmh-verbose nil)

(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'gcmh-mode 1)))

(defmacro safe-load-file (file)
  "Load FILE if exists."
  `(if (not (file-exists-p ,file))
       (message "File not found")
     (load (expand-file-name ,file) t nil nil)))

(defmacro safe-add-dirs-to-load-path (dirs)
  "Add DIRS (directories) to `load-path'."
  `(dolist (dir ,dirs)
     (setq dir (expand-file-name dir))
     (when (file-directory-p dir)
       (unless (member dir load-path)
         (push dir load-path)))))

(defmacro safe-funcall (func &rest args)
  "Call FUNC with ARGS, if it's bounded."
  `(when (fboundp ,func)
     (funcall ,func ,@args)))

(defmacro safe-mkdir (dir)
  "Create DIR in the file system."
  `(when (and (not (file-exists-p ,dir))
              (make-directory ,dir :parents))))

;; (require 'simple nil t)

;; don't omit information when lists nest too deep
(customize-set-variable 'eval-expression-print-level nil)

;; your preference for a mail composition package
(customize-set-variable 'mail-user-agent 'message-user-agent)

;; what to do when the output buffer is used by another shell command
(customize-set-variable 'async-shell-command-buffer 'rename-buffer)

;; column number display in the mode line
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'column-number-mode 1)))

;; buffer size display in the mode line
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'size-indication-mode 1)))

;; (require 'lex nil t)

;; line movement
(global-set-key (kbd "C-a") 'back-to-indent-or-line)
(global-set-key (kbd "C-e") 'move-end-of-line)

;; word movement
(global-set-key (kbd "C-<left>") 'backward-word)
(global-set-key (kbd "C-<right>") 'forward-whitespace)

;; scroll movement
(global-set-key (kbd "C-M-v") 'scroll-other-window)
(global-set-key (kbd "C-M-y") 'scroll-other-window-down)

;; edit
(global-set-key (kbd "M-y") 'browse-kill-ring)
(global-set-key (kbd "M-i") 'indent-region-or-buffer)
(global-set-key (kbd "M-j") 'duplicate-line-or-region)
(global-set-key (kbd "M-n") 'transpose-lines-up)
(global-set-key (kbd "M-p") 'transpose-lines-down)
(global-set-key (kbd "M-l") 'downcase-word)
(global-set-key (kbd "C-w") 'kill-region-or-backward-word)

;; kill
(define-key ctl-x-map (kbd "k") 'kill-buffer)

;; shell command history
(define-key ctl-x-map (kbd "C-x") 'shell-command)
(define-key ctl-x-map (kbd "C-c") 'eval-command-history)

;; mark
(define-key vlm-utils-map (kbd "h") 'mark-whole-buffer)
(define-key vlm-utils-map (kbd "s") 'mark-sexp)
(define-key vlm-utils-map (kbd "p") 'mark-paragraph)
(define-key vlm-utils-map (kbd "w") 'mark-word)

;; goto
(define-key goto-map (kbd "m") 'goto-mark)
(define-key goto-map (kbd "M-m") 'goto-mark)

;; keyboard quit
(global-set-key (kbd "M-ESC") 'keyboard-escape-quit)

;; in buffer completion
;; (global-set-key (kbd "TAB") 'completion-at-point)

;; (require 'tramp nil t)

;; set tramp default method for file transfer
;; (customize-set-variable 'tramp-default-method "ssh")

;; if non-nil, chunksize for sending input to local process.
;; (customize-set-variable 'tramp-chunksize 64)

;; a value of t would require an immediate reread during filename completion,
;; nil means to use always cached values for the directory contents.
(customize-set-variable 'tramp-completion-reread-directory-timeout nil)

;; set tramp verbose level
(customize-set-variable 'tramp-verbose 4)

;; file which keeps connection history for tramp connections.
(customize-set-variable
 'tramp-persistency-file-name
 (concat (expand-file-name user-emacs-directory) "cache/tramp"))

;; when invoking a shell, override the HISTFILE with this value
(customize-set-variable
 'tramp-histfile-override "~/.tramp_history")

;; connection timeout in seconds
(customize-set-variable 'tramp-connection-timeout 10)

;; (require 'imap nil t)

;; how long to wait between checking for the end of output
(customize-set-variable 'imap-read-timeout 2)

;; if non-nil, store session password without prompting
(customize-set-variable 'imap-store-password t)

;; (require 'smtpmail nil t)

;; specify default SMTP server
;; (customize-set-variable 'smtpmail-default-smtp-server "smtp.gmail.com")

;; the name of the host running SMTP server
;; (customize-set-variable 'smtpmail-smtp-server "smtp.gmail.com")

;; type of SMTP connections to use
(customize-set-variable 'smtpmail-stream-type 'ssl)

;; smtp service port number
(customize-set-variable 'smtpmail-smtp-service 465)

;; non-nil means mail is queued; otherwise it is sent immediately.
(customize-set-variable 'smtpmail-queue-mail nil)

;; directory where smtpmail.el stores queued mail.
;; (customize-set-variable 'smtpmail-queue-dir "")

;; (require 'sendmail nil t)

;; text inserted at end of mail buffer when a message is initialized
(customize-set-variable 'mail-signature "Att.")

;; file containing the text inserted at end of mail buffer
;; default: ~/.signature
;; (customize-set-variable 'mail-signature-file nil)

;; (require 'nsm nil t)

;; if a potential problem with the security of the network
;; connection is found, the user is asked to give input
;; into how the connection should be handled
;; `high': This warns about additional things that many
;; people would not find useful.
;; `paranoid': On this level, the user is queried for
;; most new connections
(customize-set-variable 'network-security-level 'high)

;; the file the security manager settings will be stored in.
(customize-set-variable 'nsm-settings-file
                        (expand-file-name "nsm/netword-security.data" user-emacs-directory))

;; (require 'eps-config nil t)

;; the gpg executable
(customize-set-variable 'epg-gpg-program "gpg2")

;; (require 'tls nil t)

;; indicate if certificates should be checked against trusted root certs
;; if this is ‘ask’, the user can decide whether to accept an
;; untrusted certificate
;; (customize-set-variable 'tls-checktrust nil)

;; list of strings containing commands to
;; start TLS stream to a host
;; '("openssl s_client -connect %h:%p -CAfile %t")
;; '("gnutls-cli --x509cafile %t -p %p %h --insecure")

;; (customize-set-variable
;; 'tls-program
;; '("gnutls-cli --x509cafile /etc/ssl/certs/ca-certificates.crt -p %p %h"))

;; (require 'gnutls nil t)

;; if non-nil, this should be a TLS priority string
(customize-set-variable 'gnutls-algorithm-priority nil)

;; if non-nil, this should be t or a list of checks
;; per hostname regex
(customize-set-variable 'gnutls-verify-error nil)

;; (require 'epa nil t)

;; if non-nil, cache passphrase for symmetric encryption
(customize-set-variable
 'epa-file-cache-passphrase-for-symmetric-encryption t)

;; if t, always asks user to select recipients
(customize-set-variable 'epa-file-select-keys t)

;; in epa commands, a particularly useful mode is ‘loopback’, which
;; redirects all Pinentry queries to the caller, so Emacs can query
;; passphrase through the minibuffer, instead of external Pinentry
;; program
(customize-set-variable 'epa-pinentry-mode 'loopback)

;; (add-hook 'window-setup-hook
;;           (lambda ()
;;             (funcall 'epa-file-enable)))

;; (require 'notifications nil t)

;; (require 'forms nil t)

;; (require 'async nil t)

;; to run command without displaying the output in a window
(add-to-list 'display-buffer-alist
             '("\\*Async Shell Command\\*"
               (display-buffer-no-window)
               (allow-no-window . t)))

;; (require 'nnmail nil t)

;; expirable articles that are older than this will be expired
(customize-set-variable 'nnmail-expiry-wait 4)

;; (require 'mm-bodies nil t)

(eval-after-load 'mm-bodies
  (lambda ()
    (when (boundp 'mm-body-charset-encoding-alist)
      (add-to-list 'mm-body-charset-encoding-alist '(utf-8 . base64)))))

;; (require 'shr nil t)

;; frame width to use for rendering
(customize-set-variable 'shr-width 120)

;; if non-nil, use proportional fonts for text
(customize-set-variable 'shr-use-fonts nil)

;; if non-nil, respect color specifications in the HTML
(customize-set-variable 'shr-use-colors nil)

;; if non-nil, inhibit loading images
(customize-set-variable 'shr-inhibit-images nil)

;; images that have URLs matching this regexp will be blocked (regexp)
(customize-set-variable 'shr-blocked-images nil)

;; (require 'custom nil t)

;; file used for storing customization information.
;; The default is nil, which means to use your init file
;; as specified by ‘user-init-file’.  If the value is not nil,
;; it should be an absolute file name.
(customize-set-variable
 'custom-file (concat (expand-file-name user-emacs-directory) "custom.el"))

;; non-nil means normalize frame before maximizing (not working)
;; (customize-set-variable 'x-frame-normalize-before-maximize nil)

;; if non-nil with a Gtk+ built Emacs, the Gtk+ tooltip is used
(customize-set-variable 'x-gtk-use-system-tooltips t)

;; if this equals the symbol ’hide’, Emacs temporarily hides the child
;; frame during resizing (testing)
(customize-set-variable 'x-gtk-resize-child-frames 'resize-mode)

;; (require 'files nil t)

(defun vlm-kill-emacs-query-function ()
  "Asks for Emacs kill confirmation."
  (interactive)
  (y-or-n-p "[kill-emacs]: Are you sure? "))

;; control use of version numbers for backup files.
(customize-set-variable 'version-control t)

;; non-nil means always use copying to create backup files
(customize-set-variable 'backup-by-copying t)

;; number of newest versions to keep when a new numbered backup is made
(customize-set-variable 'kept-new-versions 6)

;; number of oldest versions to keep when a new numbered backup is made
(customize-set-variable 'kept-old-versions 2)

;; if t, delete excess backup versions silently
(customize-set-variable 'delete-old-versions t)

;; non-nil means make a backup of a file the first time it is saved
(customize-set-variable 'make-backup-files nil)

;; non-nil says by default do auto-saving of every file-visiting buffer
(customize-set-variable 'auto-save-default nil)

;; most *NIX tools work best when files are terminated
;; with a newline
(customize-set-variable 'require-final-newline t)

;; non-nil if Emacs should confirm killing processes on exit
(customize-set-variable 'confirm-kill-processes nil)

;; functions to call with no arguments to query about killing Emacs
(customize-set-variable 'kill-emacs-query-functions
                        `(server-kill-emacs-query-function vlm-kill-emacs-query-function))

;; alist of filename patterns and backup directory names
(customize-set-variable 'backup-directory-alist '(("" . "~/.emacs.d/backup")))

;; create cache directory, if necessary
;; (add-hook 'window-setup-hook
;;           (lambda ()
;;             (mkdir (concat user-emacs-directory "cache") t)))

;; (require 'ffap nil t)

;; vlm-files-map
(define-key vlm-files-map (kbd "f") 'find-file-at-point)
(define-key vlm-files-map (kbd "d") 'dired-at-point)
(define-key vlm-files-map (kbd "C-d") 'ffap-list-directory)

;; (require 'locate nil t)

(define-key vlm-files-map (kbd "l") 'locate)

;; (require 'recentf nil t)

;; file to save the recent list into.
(customize-set-variable
 'recentf-save-file (concat user-emacs-directory "cache/recentf"))

;; vlm-files-map
(define-key vlm-files-map (kbd "r") 'recentf-open-files)
(define-key vlm-files-map (kbd "t") 'recentf-find-file)

;; (require 'diff nil t)

;; a string or list of strings specifying switches to be passed to diff
(customize-set-variable 'diff-switches "-u")

;; (require 'ediff nil t)

;; options to pass to `ediff-custom-diff-program'.
(customize-set-variable 'ediff-custom-diff-options "-U3")

;; the function used to split the main window between buffer-A and buffer-B
(customize-set-variable 'ediff-split-window-function 'split-window-horizontally)

;; function called to set up windows
(customize-set-variable 'ediff-window-setup-function 'ediff-setup-windows-plain)

(add-hook 'ediff-startup-hook 'ediff-toggle-wide-display)
(add-hook 'ediff-cleanup-hook 'ediff-toggle-wide-display)
(add-hook 'ediff-suspend-hook 'ediff-toggle-wide-display)

;; (require 'jka-compr nil t)
;; (require 'jka-compr-hook nil t)

;; list of compression related suffixes to try when loading files
(customize-set-variable 'jka-compr-load-suffixes '(".gz" ".el.gz"))

;; if you set this outside Custom while Auto Compression mode is
;; already enabled (as it is by default), you have to call
;; `jka-compr-update' after setting it to properly update other
;; variables. Setting this through Custom does that automatically.

;; turn on the mode
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'auto-compression-mode 1)))

;; (require 'arc-mode nil t)

;; TODO

;; (require 'dired nil t)

;; enable dired-find-alternate-file
(add-hook 'window-setup-hook
          (lambda ()
            (put 'dired-find-alternate-file 'disabled nil)))

;; dired-mode-map
(eval-after-load 'dired
  (lambda ()
    (when (boundp 'dired-mode-map)
      (define-key dired-mode-map (kbd "c") 'dired-do-copy)
      (define-key dired-mode-map (kbd "e") 'dired-create-empty-file)
      (define-key dired-mode-map (kbd "C") 'dired-do-compress-to)
      ;; redundancy
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
      (define-key dired-mode-map (kbd "C-j") 'dired-find-alternate-file))))

;; ctl-x-map (redundancy)
(define-key ctl-x-map (kbd "d") 'dired)
(define-key ctl-x-map (kbd "C-d") 'dired)

;; (require 'frame nil t)

;; with some window managers you may have to set this to non-nil
;; in order to set the size of a frame in pixels, to maximize
;; frames or to make them fullscreen.
(customize-set-variable 'frame-resize-pixelwise t)

;; normalize before maximize
(customize-set-variable 'x-frame-normalize-before-maximize t)

;; set frame title format
(customize-set-variable 'frame-title-format
                        '((:eval (if (buffer-file-name)
                                     (abbreviate-file-name (buffer-file-name))
                                   "%b"))))

;; alist of parameters for the initial minibuffer frame.
;; (customize-set-variable 'minibuffer-frame-alist
;;                         '((top . 1)
;;                           (left . 1)
;;                           (width . 80)
;;                           (height . 2)))

;; alist of parameters for the initial X window frame
(add-to-list 'initial-frame-alist '(fullscreen . fullheight))

;; alist of default values for frame creation
(add-to-list 'default-frame-alist '(internal-border-width . 2))

;; set transparency after a frame is created
;; (add-hook 'after-make-frame-functions
;;           (lambda (frame)
;;             (set-frame-transparency .8)))

;; global map
;;(global-set-key (kbd "C-x C-o") 'other-frame)

(defmacro safe-set-frame-font (font)
  "Set the default font to FONT."
  `(cond ((find-font (font-spec :name ,font))
          (set-frame-font ,font nil t))))

;; (safe-set-frame-font "Iosevka Fixed:pixelsize=22:width=regular:weight=regular")

;; enable window divider
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'window-divider-mode)))

;; disable blink cursor
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'blink-cursor-mode 1)))

;; scroll options
;; number of lines of margin at the top and bottom of a window
(customize-set-variable 'scroll-margin 0)

;; scroll up to this many lines, to bring point back on screen
(customize-set-variable 'scroll-conservatively 100)

;; t means point keeps its screen position
(customize-set-variable 'scroll-preserve-screen-position t)

;; non-nil means mouse commands use dialog boxes to ask questions
(customize-set-variable 'use-dialog-box nil)

;; set window margins
;; width in columns of left marginal area for display of a buffer
(customize-set-variable 'left-margin-width 1)

;; width in columns of right marginal area for display of a buffer.
(customize-set-variable 'right-margin-width 1)

;; if t, resize window combinations proportionally
(customize-set-variable 'window-combination-resize t)

;; if non-nil ‘display-buffer’ will try to even window sizes
(customize-set-variable 'even-window-sizes t)

;; if non-nil, left and right side windows occupy full frame height
(customize-set-variable 'window-sides-vertical nil)

;; non-nil value means always make a separate frame
(customize-set-variable 'pop-up-frames nil)

;; binds (global)
(global-set-key (kbd "s-l") 'shrink-window-horizontally)
(global-set-key (kbd "s-h") 'enlarge-window-horizontally)
(global-set-key (kbd "s-j") 'shrink-window)
(global-set-key (kbd "s-k") 'enlarge-window)

;; next and previous buffer (on current window)
(define-key ctl-x-map (kbd "C-,") 'previous-buffer)
(define-key ctl-x-map (kbd "C-.") 'next-buffer)

;; binds (vlm-window prefix map)
(define-key vlm-window-map (kbd "+") 'maximize-window)
(define-key vlm-window-map (kbd "-") 'minimize-window)
(define-key vlm-window-map (kbd "w") 'balance-windows)
(define-key vlm-window-map (kbd "o") 'other-window-prefix)

;; binds ctl-x-map (C-x w)
(define-key ctl-x-map (kbd "w") 'vlm-window-map)

;; switch to buffer
(define-key ctl-x-map (kbd "C-b") 'switch-to-buffer)

;; kill buffer and window
(define-key ctl-x-map (kbd "C-k") 'kill-buffer-and-window)

;; switch to the last buffer in the buffer list
(define-key ctl-x-map (kbd "C-u") 'unbury-buffer)



;; (require 'windmove nil t)

;; window move default keybinds (shift-up/down etc..)
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'windmove-default-keybindings)))

;; (require 'page nil t)

;; enable narrow functions
(add-hook 'window-setup-hook
          (lambda ()
            (put 'narrow-to-page 'disabled nil)
            (put 'narrow-to-region 'disabled nil)))

;; non-nil means do not display continuation lines.
(customize-set-variable 'truncate-lines nil)

;; sentences should be separated by a single space,
;; so treat two sentences as two when filling
(customize-set-variable 'sentence-end-double-space nil)

;; kill process not confirmation required
;; list of functions called with no args to query before killing a buffer.
;; The buffer being killed will be current while the functions are running.
(customize-set-variable 'kill-buffer-query-functions nil)
;; (process-kill-buffer-query-function)

;; non-nil means load prefers the newest version of a file.
(customize-set-variable 'load-prefer-newer t)

;; delete the entire contents of the current buffer
;; enable: M-x erase-buffer RET
(add-hook 'window-setup-hook
          (lambda ()
            (put 'erase-buffer 'disabled nil)))

;; (require 'hl-line nil t)

;; enable highlight line
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'global-hl-line-mode 1)))

;; (require 'linum nil t)

;; format used to display line numbers
(customize-set-variable 'linum-format " %2d ")

;; (add-hook 'prog-mode-hook 'linum-mode)

;; (require 'display-line-numbers nil t)

;; the default type of line numbers to use in `display-line-numbers-mode'
(customize-set-variable 'display-line-numbers-type t)

;; if non-nil, do not shrink line number width
(customize-set-variable 'display-line-numbers-grow-only t)

;; if non-nil, count number of lines to use for line number width
(customize-set-variable 'display-line-numbers-width-start t)

;; if an integer N > 0, highlight line number of every Nth line
(customize-set-variable 'display-line-numbers-major-tick 0)

;; if an integer N > 0, highlight line number of every Nth line
(customize-set-variable 'display-line-numbers-minor-tick 0)

(add-hook 'prog-mode-hook 'display-line-numbers-mode)

;; (safe-funcall 'global-display-line-numbers-mode 1)))

;; non-nil means to make the cursor very visible
(customize-set-variable 'visible-cursor t)

;; coding system to use with system messages
(customize-set-variable 'locale-coding-system 'utf-8)

;; coding system to be used for encoding the buffer contents on saving
(customize-set-variable 'buffer-file-coding-system 'utf-8)

;; add coding-system at the front of the priority list for automatic detection
(prefer-coding-system 'utf-8)

;; set coding system (UFT8)
(set-language-environment "UTF-8")
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)

;; (require 'chistory nil t)

;; maximum length of history lists before truncation takes place
(customize-set-variable 'history-length 1024)

;;list history of commands that used the minibuffer
(customize-set-variable 'list-command-history-max history-length)

;; (require 'minibuffer nil t)

;; non-nil means to allow minibuffer commands while in the minibuffer
(customize-set-variable 'enable-recursive-minibuffers nil)

;; if non-nil, `read-answer' accepts single-character answers
(customize-set-variable 'read-answer-short t)

;; non-nil means completion ignores case when reading a buffer name
(customize-set-variable 'read-buffer-completion-ignore-case t)

;; non-nil means when reading a file name completion ignores case
(customize-set-variable 'read-file-name-completion-ignore-case nil)

;; number of completion candidates below which cycling is used
(customize-set-variable 'completion-cycle-threshold nil)

;; treat the SPC or - inserted by `minibuffer-complete-word as delimiters
(customize-set-variable 'completion-pcm-complete-word-inserts-delimiters t)

;; a string of characters treated as word delimiters for completion
(customize-set-variable 'completion-pcm-word-delimiters "-_./:| ")

;; if non-nil, print helpful inline messages during completion
(customize-set-variable 'completion-show-inline-help nil)

;; non-nil means automatically provide help for invalid completion input
(customize-set-variable 'completion-auto-help nil)

;; non-nil means don’t consider case significant in completion
(customize-set-variable 'completion-ignore-case nil)

;; non-nil if flex completion rejects spaces in search pattern.
(customize-set-variable 'completion-flex-nospace nil)

;; list of completion styles to use: see `completion-styles-alist variable
(customize-set-variable 'completion-styles '(emacs22 basic partial-completion flex))

;; list of category-specific user overrides for completion styles. (TODO: research)
;; (customize-set-variable 'completion-category-overrides nil)
;; '((file (styles initials basic))
;;   (buffer (styles initials basic))
;;   (info-menu (styles basic))))

;; define the appearance and sorting of completions
(customize-set-variable 'completions-format 'vertical)

;; how to resize mini-windows (the minibuffer and the echo area)
;; a value of t means resize them to fit the text displayed in them
(customize-set-variable 'resize-mini-windows nil)

;; format string used to output "default" values
(customize-set-variable 'minibuffer-default-prompt-format " (default: %s)")

;; if non-nil, shorten "(default ...)" to "[...]" in minibuffer prompts
(customize-set-variable 'minibuffer-eldef-shorten-default t)

;; non-nil means entering the minibuffer raises the minibuffer's frame
(customize-set-variable 'minibuffer-auto-raise t)

;; non-nil means to delete duplicates in history
(customize-set-variable 'history-delete-duplicates t)

;; special hook to find the completion table for the entity at point (default)
(customize-set-variable 'completion-at-point-functions
                        `(elisp-completion-at-point
                          tags-completion-at-point-function t))

;; defer garbage collection
;; set `gc-cons-threshold' to most-positive-fixnum
;; the largest lisp integer value representation
(add-hook 'minibuffer-setup-hook
          (lambda ()
            (setq gc-cons-threshold most-positive-fixnum)))

;; reset threshold to inital value (16 megabytes)
(add-hook 'minibuffer-exit-hook
          (lambda () (run-at-time 1 nil
                                  (lambda ()
                                    (setq gc-cons-threshold 16777216)))))

;; minibuffer-local-map
(define-key minibuffer-local-map (kbd "M-`") 'minibuffer-completion-help)
(define-key minibuffer-local-map (kbd "M-w") 'minibuffer-complete-word)
(define-key minibuffer-local-map (kbd "<tab>") 'minibuffer-complete)

;; global
(global-set-key (kbd "<C-delete>") 'quit-minibuffer)
(global-set-key (kbd "M-x") 'goto-minibuffer-or-call-it)

;; if `file-name-shadow-mode' is active, any part of the
;; minibuffer text that would be ignored because of this is given the
;; properties in `file-name-shadow-properties', which may
;; be used to make the ignored text invisible, dim, etc.
(add-hook 'window-setup-hook
          (lambda()
            (funcall 'file-name-shadow-mode 0)))

;; when active, any recursive use of the minibuffer will show
;; the recursion depth in the minibuffer prompt, this is only
;; useful if `enable-recursive-minibuffers' is non-nil
(add-hook 'window-setup-hook
          (lambda()
            (funcall 'minibuffer-depth-indicate-mode 0)))

;; when active, minibuffer prompts that show a default value only show
;; the default when it's applicable
(add-hook 'window-setup-hook
          (lambda()
            (funcall 'minibuffer-electric-default-mode 1)))

;; (require 'savehist nil t)

;; file name where minibuffer history is saved to and loaded from.
(customize-set-variable
 'savehist-file (concat user-emacs-directory "cache/history"))

;; if non-nil, save all recorded minibuffer histories.
(customize-set-variable 'savehist-save-minibuffer-history t)

;; enable savehist mode
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'savehist-mode 1)))

;; (require 'completion nil t)

;; custom
;; how far to search in the buffer when looking for completions,
;; if nil, search the whole buffer
(customize-set-variable 'completion-search-distance 12000)

;; if non-nil, the next completion prompt does a cdabbrev search
(customize-set-variable 'completion-cdabbrev-prompt-flag nil)

;; non-nil means show help message in *Completions* buffer
(customize-set-variable 'completion-show-help nil)

;; minimum output speed at which to display next potential completion
(customize-set-variable 'completion-prompt-speed-threshold 2400)

;; non-nil means separator characters mark previous word as used
(customize-set-variable 'completion-on-separator-character t)

;; the filename to save completions to.
(customize-set-variable
 'save-completions-file-name
 (expand-file-name "cache/completitions" user-emacs-directory))

;; non-nil means save most-used completions when exiting emacs
(customize-set-variable 'save-completions-flag t)

;; discard a completion if unused for this many hours.
;; (1 day = 24, 1 week = 168)
;; if this is 0, non-permanent completions
;; will not be saved unless these are used
(customize-set-variable 'save-completions-retention-time 168)

(add-to-list 'display-buffer-alist
             '("\\*completions\\*"
               (display-buffer-below-selected display-buffer-at-bottom)
               (window-height . fit-window-to-buffer)))

;; completion-list-mode-map
(define-key completion-list-mode-map (kbd "q") 'delete-completion-window)
(define-key completion-list-mode-map (kbd "d") 'delete-completion-line)
(define-key completion-list-mode-map (kbd "w") 'kill-ring-save)
(define-key completion-list-mode-map (kbd "RET") 'choose-completion)
(define-key completion-list-mode-map (kbd "TAB") 'next-completion)
(define-key completion-list-mode-map (kbd "DEL") 'previous-completion)
(define-key completion-list-mode-map (kbd "C-j") 'choose-completion)
(define-key completion-list-mode-map (kbd "C-g") 'quit-minibuffer)

;; enable dynamic completion mode
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'dynamic-completion-mode 1)))

;; (require 'icomplete nil t)

;; custom
;; pending-completions number over which to apply `icomplete-compute-delay
(customize-set-variable 'icomplete-delay-completions-threshold 512)

;; maximum number of initial chars to apply `icomplete-compute-delay
(customize-set-variable 'icomplete-max-delay-chars 2)

;; completions-computation stall, used only with large-number completions
(customize-set-variable 'icomplete-compute-delay 0)

;; when non-nil, show completions when first prompting for input
(customize-set-variable 'icomplete-show-matches-on-no-input t)

;; if non-nil, automatically delete superfluous parts of file names
(customize-set-variable 'icomplete-tidy-shadowed-file-names t)

;; when non-nil, hide common prefix from completion candidates
(customize-set-variable 'icomplete-hide-common-prefix nil)

;; maximum number of lines to use in the minibuffer
(customize-set-variable 'icomplete-prospects-height 1)

;; string used by Icomplete to separate alternatives in the minibuffer
;; (customize-set-variable 'icomplete-separator (propertize " • " 'face 'shadow))
;; (customize-set-variable 'icomplete-separator (propertize " · " 'face 'shadow))
(customize-set-variable 'icomplete-separator (propertize " | " 'face 'shadow))

;; specialized completion tables with which `icomplete' should operate,
;; if this is t, `icomplete operates on all tables
(customize-set-variable 'icomplete-with-completion-tables t)

;; if non-nil, also use icomplete when completing in non-mini buffers
(customize-set-variable 'icomplete-in-buffer nil)

(eval-after-load 'icomplete
  (lambda ()
    (when (boundp 'icomplete-minibuffer-map)
      ;; unbind
      (define-key icomplete-minibuffer-map (kbd "SPC") nil)
      ;; bind
      (define-key icomplete-minibuffer-map (kbd "C-j") 'icomplete-force-complete-and-exit)
      (define-key icomplete-minibuffer-map (kbd "RET") 'exit-minibuffer)
      (define-key icomplete-minibuffer-map (kbd "<tab>") 'minibuffer-complete)
      (define-key icomplete-minibuffer-map (kbd "C-n") 'icomplete-forward-completions)
      (define-key icomplete-minibuffer-map (kbd "C-p") 'icomplete-backward-completions)
      (define-key icomplete-minibuffer-map (kbd "DEL") 'icomplete-fido-backward-updir)
      (define-key icomplete-minibuffer-map (kbd "M-p") 'previous-line-or-history-element)
      (define-key icomplete-minibuffer-map (kbd "M-n") 'next-line-or-history-element)
      (define-key icomplete-minibuffer-map (kbd "M-i") 'minibuffer-insert-completion-in-buffer)
      (define-key icomplete-minibuffer-map (kbd "M-y") 'minibuffer-insert-completion-at-point)
      (define-key icomplete-minibuffer-map (kbd "M-k") 'minibuffer-kill-current-completion)
      (define-key icomplete-minibuffer-map (kbd "M-h") 'minibuffer-describe-current-completion))))

;; enable globally
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'icomplete-mode 1)))

;; (require 'tab-bar nil t)

;; defines where to show the close tab button
(customize-set-variable 'tab-bar-close-button-show nil)

;; if non-nil, show the "New tab" button in the tab bar
(customize-set-variable 'tab-bar-new-button-show nil)

;; string that delimits tabs
(customize-set-variable 'tab-bar-separator " ")

;; if the value is ‘1’, then hide the tab bar when it has only one tab
(customize-set-variable 'tab-bar-show nil)

(define-key vlm-tabs-map (kbd "t") 'tab-switcher)
(define-key vlm-tabs-map (kbd "n") 'tab-bar-new-tab)
(define-key vlm-tabs-map (kbd "r") 'tab-bar-rename-tab)



;; (require 'tool-bar nil t)

;; enable
;; (safe-funcall 'tool-bar-mode 1)

;; (require 'tooltip nil t)

;; seconds to wait before displaying a tooltip the first time.
(customize-set-variable 'tooltip-delay 0.2)

;; use the echo area instead of tooltip frames for help and GUD tooltips
(customize-set-variable 'tooltip-use-echo-area t)

(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'tooltip-mode 1)))

;; (require 'menu-bar nil t)

(define-key vlm-utils-map (kbd "o") 'menu-bar-open)

;; (safe-funcall 'menu-bar-mode 0)

;; (require 'scroll-bar nil t)

;; disable scroll bar
;; (safe-funcall 'scroll-bar-mode 0)

;; (require 'fringe nil t)

;; custom
;; 0 -> ("no-fringes" . 0), remove ugly icons to represet new lines
;; ascii is more than enough to represent this information
;; default appearance of fringes on all frame
(customize-set-variable 'fringe-mode 0)

;; remove underline
(customize-set-variable 'x-underline-at-descent-line t)

;; mode-line format
(customize-set-variable 'mode-line-format
                        '("%e"
                          mode-line-front-space
                          mode-line-mule-info
                          mode-line-modified
                          mode-line-remote
                          (:eval (format "  %d/%d"
                                         exwm-workspace-current-index
                                         (exwm-workspace--count)))
                          (:eval (format-time-string "  %H:%M"))
                          ;; 
                          " (%l:%c)"
                          " · "
                          (:eval (propertized-buffer-identification "%b"))
                          " · "
                          "("
                          mode-name
                          ")"
                          (:eval (when vc-mode (concat " » " (projectile-project-name) " »")))
                          (vc-mode vc-mode)))

;; set wallpaper
;; (add-hook 'window-setup-hook
;;           (lambda()
;;             (set-wallpaper
;;              "~/media/images/wallpapers/studio-ghibli/ghibli-7.jpg"
;;              "-g -0-0")))

(setq visible-bell nil
      ring-bell-function '(lambda ()
                            (invert-face 'mode-line)
                            (run-with-timer 0.01 nil #'invert-face 'mode-line)))

;; indentation can insert tabs if this is non-nil
(customize-set-variable 'indent-tabs-mode nil)

;; default number of columns for margin-changing functions to indent
(customize-set-variable 'standard-indent 4)

;; distance between tab stops (for display of tab characters), in columns.
(customize-set-variable 'tab-width 4)

;; if 'complete, TAB first tries to indent the current line
;; if t, hitting TAB always just indents the current line
;; If nil, hitting TAB indents the current line if point is at the left margin
;; or in the line's indentation
(customize-set-variable 'tab-always-indent 'complete)

;; (require 'kmacro nil t)

(define-key ctl-x-map (kbd "m") 'kmacro-keymap)

;; (require 'elec-pair nil t)

;; alist of pairs that should be used regardless of major mode.
(customize-set-variable 'electric-pair-pairs
                        '((?\{ . ?\})
                          (?\( . ?\))
                          (?\[ . ?\])
                          (?\" . ?\")))

(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'electric-pair-mode 1)))

;; (require 'newcomment nil t)

;; global-map
(global-set-key (kbd "M-c") 'comment-line)

;; (require 'face-remap nil t)

;; ctl-x-map (C-x)
(define-key ctl-x-map (kbd "=") 'text-scale-adjust)

;; (require 'isearch nil t)

;; (require 'delsel nil t)

;; delete selection-mode
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'delete-selection-mode 1)))

;; (require 'replace nil t)

(global-set-key (kbd "M-s M-o") 'list-occurrences-at-point)

;; (require 'rect nil t)

;; TODO: find-out prefix map
(global-set-key (kbd "C-x r %") 'replace-rectangle)

;; (require 'whitespace nil t)

;; specify which kind of blank is visualized
;; empty was removed
(customize-set-variable
 'whitespace-style
 '(face
   tabs spaces trailing lines
   space-before-tab newline indentation
   space-after-tab space-mark tab-mark
   newline-mark missing-newline-at-eof))

;; clean whitespace and newlines before buffer save
(add-hook 'before-save-hook #'whitespace-cleanup)

;; binds
(define-key ctl-x-map (kbd ".") 'whitespace-mode)

;; (require 'tmm nil t)

;; (require 'server nil t)

;; enable emacs server after startup (not used anymore)
;; (add-hook 'after-init-hook
;;           (lambda ()
;;             (funcall 'server-start)))

;; (require 'net-utils)



;; (require 'loadhist nil t)

;; (require 'find-lisp nil t)

;; (require 'help nil t)

;; always select the help window
(customize-set-variable 'help-window-select nil)

;; maximum height of a window displaying a temporary buffer.
(customize-set-variable 'temp-buffer-max-height
                        (lambda (buffer)
                          (if (and (display-graphic-p) (eq (selected-window) (frame-root-window)))
                              (/ (x-display-pixel-height) (frame-char-height) 4)
                            (/ (frame-height) 4))))

;; the minimum total height, in lines, of any window
(customize-set-variable 'window-min-height 8)



(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'temp-buffer-resize-mode 1)))

;; (require 'help-fns nil t)

;; (require 'help-mode nil t)

(eval-after-load 'help-mode
  (lambda ()
    (when (boundp 'help-mode-map)
      (define-key help-mode-map (kbd "C-j") 'push-button))))

;; help prefix map (C-h) (redundancy)
(define-key help-map (kbd "C-f") 'describe-function)
(define-key help-map (kbd "C-v") 'describe-variable)
(define-key help-map (kbd "C-k") 'describe-key)
(define-key help-map (kbd "C-m") 'describe-mode)
(define-key help-map (kbd "C-o") 'describe-symbol)
(define-key help-map (kbd "C-e") 'view-echo-area-messages)

;; (require 'info nil t)

;; non-nil means don’t record intermediate Info nodes to the history
(customize-set-variable 'Info-history-skip-intermediate-nodes nil)

;; list of additional directories to search for (not working)
;; (customize-set-variable 'Info-additional-directory-list
;;                         `(,(expand-file-name "info/" user-emacs-directory)))

;; list of directories to search for Info documentation files (works!)
(customize-set-variable 'Info-directory-list
                        `("/usr/local/share/emacs/info/"
                          "/usr/local/share/info/"
                          ,(expand-file-name "info/" user-emacs-directory)))

;; 0 -> means do not display breadcrumbs
(customize-set-variable 'info-breadcrumbs-depth 0)

;; help-map
(define-key help-map (kbd "TAB") 'info-display-manual)

;; info-mode-map
(eval-after-load 'info
  (lambda ()
    (when (boundp 'Info-mode-map)
      (define-key Info-mode-map (kbd "C-j") 'Info-follow-nearest-node))))

;; (require 'eldoc nil t)

;; number of seconds of idle time to wait before printing.
(customize-set-variable 'eldoc-idle-delay 0.1)

;; if value is any non-nil value other than t, symbol name may be truncated
;; if it will enable the function arglist or documentation string to fit on a
;; single line without resizing window
(customize-set-variable 'eldoc-echo-area-use-multiline-p t)

;; enable eldoc globally
(add-hook 'window-setup-hook
          (lambda()
            (funcall 'eldoc-mode 1)))

;; generated by `update-directory-autoloads'
(require 'site-lisp-loaddefs nil t)

;; (require 'lazy-load nil t)

;; non-nil means starts to monitor the directories
(customize-set-variable 'lazy-load-enable-filenotify-flag t)

;; non-nil means show debug messages
(customize-set-variable 'lazy-load-debug-messages-flag t)

;; non-nil means run `lazy-load-update-autoloads' when emacs is idle
(customize-set-variable 'lazy-load-enable-run-idle-flag nil)

;; idle timer value
(customize-set-variable 'lazy-load-idle-seconds 15)

;; interval in seconds, used to trigger the timer callback
(customize-set-variable 'lazy-load-timer-interval 8)

;; target files and directories
(customize-set-variable 'lazy-load-files-alist
                        (list
                         ;; lisp directory
                         (cons "lisp-loaddefs.el"
                               (expand-file-name "lisp/" user-emacs-directory))
                         ;; site-lisp directory
                         (cons "site-lisp-loaddefs.el"
                               (expand-file-name "site-lisp/" user-emacs-directory))))

(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'turn-on-lazy-load-mode)))

;; (require 'global-so-long-mode nil t)



(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'global-so-long-mode 1)))

;; (require 'iedit nil t)

;; if no-nil, the key is inserted into global-map,
;; isearch-mode-map, esc-map and help-map.
;; (customize-set-variable 'iedit-toggle-key-default (kbd "C-;"))

;; bind (iedit-mode-keymap)
(eval-after-load 'iedit
  (lambda ()
    (when (boundp 'iedit-mode-keymap)
      (define-key iedit-mode-keymap (kbd "<tab>") 'complete-at-point-or-indent)
      (define-key iedit-mode-keymap (kbd "M-n") 'iedit-next-occurrence))))

;; bind (global)
(global-set-key (kbd "C-;") 'iedit-mode)

;; (require 'undo-tree nil t)

;; define alias for redo
(defalias 'redo 'undo-tree-redo)

(define-key ctl-x-map (kbd "u") 'undo-tree-visualize)

;; enable
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'global-undo-tree-mode 1)))

;; (require 'browse-kill-ring nil t)

;; non-nil means display duplicate items in `kill-ring' buffer
(customize-set-variable 'browse-kill-ring-display-duplicates nil)

;; non-nil means browse-kill-ring will show a preview of what the
;; buffer would look like if the item under point were inserted
(customize-set-variable 'browse-kill-ring-show-preview nil)

;; (require 'shell nil t)

;; hook
(add-hook 'shell-mode-hook
          (lambda()
            ;; do not display continuation lines.
            (setq truncate-lines nil)))

;; (require 'eshell nil t)

;; ctl-x-map (C-x)
(define-key ctl-x-map (kbd "&") 'eshell)

;; (require 'exwm nil t)

(defvar eos-xrandr-right-screen "eDP-1"
  "Defines the screen located at right side")

(defvar eos-xrandr-left-screen "HDMI-1"
  "Defines the screen located at right side")

(defvar eos-xrandr-command
  (format "xrandr --output %s --right-of %s"
          eos-xrandr-right-screen
          eos-xrandr-left-screen)
  "Defines the screen located at right side")

;; monitors: check the xrandr(1) output and use the same name/order
;; TODO: create a func that retrieves these values from xrandr

(customize-set-variable
 'exwm-randr-workspace-monitor-plist '(0 "eDP-1"
                                         1 "HDMI-1"
                                         2 "HDMI-1"))

(customize-set-variable 'exwm-workspace-number
                        (if (boundp 'exwm-randr-workspace-monitor-plist)
                            (/ (safe-length exwm-randr-workspace-monitor-plist) 2)
                          1))

;; set exwm workspaces number
(customize-set-variable 'exwm-workspace-number 2)

;; show workspaces in all buffers
(customize-set-variable 'exwm-workspace-show-all-buffers t)

;; non-nil to allow switching to buffers on other workspaces
(customize-set-variable 'exwm-layout-show-all-buffers t)

;; non-nil to force managing all X windows in tiling layout.
(customize-set-variable 'exwm-manage-force-tiling t)

;; exwn global keybindings
(customize-set-variable 'exwm-input-global-keys
                        `(([?\s-r] . exwm-reset)
                          ([?\s-q] . exwm-input-toggle-keyboard)
                          ([?\s-d] . exwm-floating-toggle-floating)
                          ([?\s-m] . exwm-layout-toggle-fullscreen)

                          ;; create and switch to workspaces
                          ,@(mapcar (lambda (i)
                                      `(,(kbd (format "s-%d" i)) .
                                        (lambda ()
                                          (interactive)
                                          (exwm-workspace-switch-create ,i))))
                                    (number-sequence 0 3))))

;; The following example demonstrates how to use simulation keys to mimic
;; the behavior of Emacs.  The value of `exwm-input-simulation-keys` is a
;; list of cons cells (SRC . DEST), where SRC is the key sequence you press
;; and DEST is what EXWM actually sends to application.  Note that both SRC
;; and DEST should be key sequences (vector or string).
(customize-set-variable 'exwm-input-simulation-keys
                        '(
                          ;; movement
                          ([?\C-p] . [up])
                          ([?\C-b] . [left])
                          ([?\C-f] . [right])
                          ([?\C-n] . [down])
                          ([?\M-b] . [C-left])
                          ([?\M-f] . [C-right])
                          ([?\C-e] . [end])
                          ([?\C-v] . [next])
                          ([?\C-a] . [home])
                          ([?\M-v] . [prior])
                          ([?\C-d] . [delete])
                          ([?\C-k] . [S-end delete])

                          ;; browser temporary
                          ([?\C-o] . [C-prior]) ; change tab mapping
                          ([?\C-k] . [C-w]) ; close tab mapping
                          ([?\C-j] . [return]) ; close tab mapping

                          ;; cut/paste.
                          ([?\C-w] . [?\C-x])
                          ([?\M-w] . [?\C-c])
                          ([?\C-y] . [?\C-v])

                          ;; Escape (cancel)
                          ([?\C-g] . [escape])

                          ;; search
                          ([?\C-s] . [?\C-f])))

;; this little bit will make sure that XF86 keys work in exwm buffers as well
(if (boundp 'exwm-input-prefix-keys)
    (progn
      (dolist (key '(XF86AudioLowerVolume
                     XF86AudioRaiseVolume
                     XF86PowerOff
                     XF86AudioMute
                     XF86AudioPlay
                     XF86AudioStop
                     XF86AudioPrev
                     XF86AudioNext
                     XF86ScreenSaver
                     XF68Back
                     XF86Forward
                     Scroll_Lock
                     print))
        (cl-pushnew key exwm-input-prefix-keys))))

;; All buffers created in EXWM mode are named "*EXWM*". You may want to
;; change it in `exwm-update-class-hook' and `exwm-update-title-hook', which
;; are run when a new X window class name or title is available.  Here's
;; some advice on this topic:
;; + Always use `exwm-workspace-rename-buffer` to avoid naming conflict.
;; + For applications with multiple windows (e.g. GIMP), the class names of
;; all windows are probably the same.  Using window titles for them makes
;; more sense.

;; update the buffer name by X11 window title
(add-hook 'exwm-update-title-hook
          (lambda ()
            (when (and (fboundp 'exwm-workspace-rename-buffer)
                       (boundp 'exwm-class-name)
                       (boundp 'exwm-title))
              (exwm-workspace-rename-buffer
               (truncate-string-to-width
                (concat exwm-class-name "|" exwm-title) 32)))))

(add-hook 'exwm-randr-screen-change-hook
          (lambda ()
            (start-process-shell-command
             "randr" nil eos-xrandr-command)))

;; enable exwm if graphic display is non-nil
(when (and (display-graphic-p)
           (require 'exwm nil t)
           (require 'exwm-randr nil t))
  (progn
    (exwm-enable)
    (exwm-randr-enable)))

;; (require 'package nil t)

;; (require 'bookmark nil t)

;; custom
;; file in which to save bookmarks by default.
(customize-set-variable
 'bookmark-default-file (concat user-emacs-directory "cache/bookmarks"))

;; (require 'term nil t)

;; if non-nil, is file name to use for explicitly
;; requested inferior shell
(customize-set-variable
 'explicit-shell-file-name (getenv "SHELL"))

;; if non-nil, add a ‘/’ to completed directories
(customize-set-variable 'term-completion-addsuffix t)

;; regexp to recognize prompts in the inferior process
;; (customize-set-variable 'term-prompt-regexp "^\\(>\\|\\(->\\)+\\) *")
(customize-set-variable 'term-prompt-regexp "^[^#$%>\n]*[#$%>] *")

;; if non-nil, automatically list possibilities on partial completion.
(customize-set-variable 'term-completion-autolist t)

;; if true, buffer name equals process name
(customize-set-variable 'term-ansi-buffer-base-name t)

(add-hook 'term-mode-hook
          (lambda()
            ;; do not display continuation lines.
            (setq truncate-lines nil)
            ;; setup keybinds
            (safe-funcall 'term-setup-keystroke)))

;; bind term-raw-map/term-mode-map with hook
(add-hook 'term-mode-hook
          (lambda ()
            (when (and (boundp 'term-raw-map)
                       (boundp 'term-mode-map))
              ;; term-raw-map
              (define-key term-raw-map (kbd "s-q") 'term-line-mode)
              ;; term-mode-map
              (define-key term-mode-map (kbd "s-q") 'term-char-mode))))

;; hook run after the term buffer is killed (not working)
;; (add-hook 'kill-buffer-hook 'term-kill-buffer-hook)

;; clt-x-map (C-x) prefix
(define-key ctl-x-map (kbd "RET") 'multi-term-dedicated-toggle)
(define-key ctl-x-map (kbd "<C-return>") 'open-terminal)

;; (require 'auth-source nil t)

;; Note: If the auth-sources variable contains ~/.auth.gpg before
;; ~/.auth, the auth-source library will try to read the GnuPG
;; encrypted .gpg file first, before the unencrypted file.

;; list of authentication sources
(customize-set-variable
 'auth-sources '("~/.auth/auth.gpg" "~/.auth/netrc"))

;; (require 'desktop nil t)

;; list of directories to search for the desktop file
(customize-set-variable 'desktop-path
                        (list (expand-file-name "cache" user-emacs-directory)))

;; specifies whether the desktop should be saved when it is killed
(customize-set-variable 'desktop-save 'ask)

;; if t, restoring frames reuses existing frames
(customize-set-variable 'desktop-restore-frames t)

;; if t: restoring frames reuses existing frames,
;; if nil: deletes existing frames,
;; if keep: keeps existing frames and does not reuse them
(customize-set-variable 'desktop-restore-reuses-frames t)

;; if all, also restores frames that are partially offscreen onscreen
(customize-set-variable 'desktop-restore-forces-onscreen 'all)

;; if nil, restores frames into their original displays (if possible)
(customize-set-variable 'desktop-restore-in-current-display nil)

;; Idle delay before starting to create buffers
(customize-set-variable 'desktop-lazy-idle-delay 4)

;; number of buffers to restore immediately (max),
;; remaining buffers are restored lazily
(customize-set-variable 'desktop-restore-eager 16)

;; when non-nil, save buffer status in desktop file
(customize-set-variable 'desktop-save-buffer t)

;; number of seconds of idle time before auto-saving the desktop
(customize-set-variable 'desktop-auto-save-time 16)

(add-hook 'desktop-after-read-hook
          (lambda ()
            (safe-funcall 'tab-bar-update-switch-binds)))

(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'desktop-save-mode 1)))

;; (require 'time nil t)

;; seconds between updates of time in the mode line.
(customize-set-variable 'display-time-interval 15)

;; non-nil indicates time should be displayed as hh:mm, 0 <= hh <= 23
(customize-set-variable 'display-time-24hr-format t)

;; set format time string
(customize-set-variable 'display-time-format "%H:%M")

;; load-average values below this value won’t be shown in the mode line.
(customize-set-variable 'display-time-load-average-threshold 1.0)

;; enable display time
;; (safe-funcall 'display-time-mode 1)

;; (require 'all-the-icons nil t)

;; whether or not to include a foreground colour when formatting the icon
(customize-set-variable 'all-the-icons-color-icons nil)

;; the default adjustment to be made to the `raise' display property of an icon
(customize-set-variable 'all-the-icons-default-adjust -0.3)

;; the base Scale Factor for the `height' face property of an icon
(customize-set-variable 'all-the-icons-scale-factor 1.1)

;; add vlm-theme-dir to theme load path
(add-to-list 'custom-theme-load-path
             (concat user-emacs-directory "themes"))

;; load theme
(load-theme 'moebius-glass t)

;; (require 'ibuffer nil t)

;; the criteria by which to sort the buffers
(customize-set-variable 'ibuffer-default-sorting-mode 'filename/process)

;; if non-nil, display the current Ibuffer buffer itself
(customize-set-variable 'ibuffer-view-ibuffer nil)

;; if non-nil, then show the names of filter groups which are empty
(customize-set-variable 'ibuffer-show-empty-filter-groups nil)

;; an alist of filtering groups to switch between.
(customize-set-variable
 'ibuffer-saved-filter-groups
 (quote (("default"
          ("Emacs" (or
                    (name . "^\\*eldoc for")
                    (name . "^\\*scratch\\*$")
                    (name . "^\\*Warnings\\*$")
                    (name . "^\\*Completions\\*$")
                    (name . "^\\*Completions\\*$")
                    (name . "^\\*Messages\\*$")))

          ("Comint" (or
                     (mode . comint-mode)
                     (name . "^\\*Async Shell Command\\*$")
                     (name . "^\\*dashboard\\*$")
                     (name . "^\\*tramp")
                     (name . "^\\*make\\*$")))

          ("Custom" (mode . Custom-mode))
          ("IRC" (mode . rcirc-mode))

          ("Info"  (or
                    (mode . Info-mode)
                    (mode . dictionary-mode)
                    (mode . help-mode)
                    (mode . apropos-mode)
                    (mode . Man-mode)))

          ("Tags" (or
                   (mode . tags-table-mode)
                   (mode . xref--xref-buffer-mode)))

          ("Compilation" (or
                          (mode . compilation-mode)
                          (mode . emacs-lisp-compilation-mode)
                          (name . "^\\*compilation\\*$")))

          ("Debug"  (or (mode . debugger-mode)
                        (name . "^\\*debug")))

          ("Grep" (or
                   (mode . ag-mode)
                   (mode . occur-mode)
                   (mode . locate-mode)))

          ("Term" (mode . term-mode))
          ("Shell" (or
                    (mode . shell-mode)
                    (mode . eshell-mode)))

          ("Exwm" (mode . exwm-mode))

          ("Emms" (or
                   (mode . emms-playlist-mode)
                   (name . "^\\*EMMS-LOG\\*$")))

          ("Eww" (mode . eww-mode))
          ("Dired" (mode . dired-mode))

          ("Gnus" (or
                   (mode . message-mode)
                   (mode . bbdb-mode)
                   (mode . mail-mode)
                   (mode . gnus-group-mode)
                   (mode . gnus-server-mode)
                   (mode . gnus-summary-mode)
                   (mode . gnus-article-mode)
                   (mode . gnus-browse-mode)
                   (name . "^\\.bbdb$")
                   (name . "^\\.newsrc-dribble")))

          ("Magit" (or
                    (mode . magit-mode)
                    (mode . magit-status-mode)
                    (mode . magit-diff-mode)
                    (mode . magit-process-mode)))

          ("Planner" (or
                      (name . "^\\*Calendar\\*$")
                      (name . "^diary$")
                      (mode . muse-mode)))

          ("Dev" (or
                  (mode . prog-mode)
                  (mode . c-mode)
                  (mode . c++-mode)
                  (mode . emacs-lisp-mode)
                  (mode . web-mode)
                  (mode . js-mode)))

          ("IRC" (or
                  (mode . erc-mode)))))))

;; hook run upon entry into `ibuffer-mode'
(add-hook 'ibuffer-mode-hook
          '(lambda ()
             (ibuffer-auto-mode 1)
             (ibuffer-switch-to-saved-filter-groups "default")))

(define-key ctl-x-map (kbd "b") 'ibuffer)

;; (require 'dabbrev nil t)

;; non-nil means case sensitive search.
(customize-set-variable 'dabbrev-upcase-means-case-search t)

;; whether dabbrev treats expansions as the same if they differ in case
;; a value of nil means treat them as different.
(customize-set-variable 'dabbrev-case-distinction t)

;; (require 'hippie-exp nil t)

(global-set-key (kbd "M-]") 'hippie-expand)

;; (require 'yasnippet nil t)

;; binds vlm-completion-map
(define-key vlm-completion-map (kbd "e") 'yas-expand)
(define-key vlm-completion-map (kbd "i") 'yas-insert-snippet)
(define-key vlm-completion-map (kbd "v") 'yas-visit-snippet-file)

;; binds yas-keymap
(eval-after-load 'yasnippet
  (lambda ()
    (when (boundp 'yas-keymap)
      (define-key yas-keymap (kbd "TAB") nil)
      (define-key yas-keymap (kbd "<tab>") nil)
      (define-key yas-keymap (kbd "M-TAB") 'yas-next-field))

    ;; unbind: clean minor mode map alist
    (setq minor-mode-map-alist nil)))

;; enable yasnippet after emacs startup
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'yas-global-mode 1)))

;; (require 'ace nil t)

;; vlm-completion-map
(define-key vlm-completion-map (kbd "`") 'complete-word)
(define-key vlm-completion-map (kbd "f") 'complete-file-name)
(define-key vlm-completion-map (kbd "<tab>") 'complete-at-point-or-indent)

;; global map
(global-set-key (kbd "M-<tab>") 'complete-at-point-or-indent)

;; TODO
;; (define-key vlm-completion-map (kbd "/" 'ace-complete-dabbrev)
;; (define-key vlm-completion-map (kbd "]") 'ace-complete-dabbrev-code)

;; (require 'iedit nil t)

;; if no-nil, the key is inserted into global-map,
;; isearch-mode-map, esc-map and help-map.
;; (customize-set-variable 'iedit-toggle-key-default (kbd "C-;"))

;; bind (iedit-mode-keymap)
(eval-after-load 'iedit
  (lambda ()
    (when (boundp 'iedit-mode-keymap)
      (define-key iedit-mode-keymap (kbd "<tab>") 'vlm-complete-in-buffer-or-indent)
      (define-key iedit-mode-keymap (kbd "M-n") 'iedit-next-occurrence))))

;; bind (global)
(global-set-key (kbd "C-;") 'iedit-mode)

;; (require 'undo-tree nil t)

;; define alias for redo
(defalias 'redo 'undo-tree-redo)

(define-key ctl-x-map (kbd "u") 'undo-tree-visualize)

;; enable
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'global-undo-tree-mode 1)))

;; (require 'artist nil t)

;; whether or not to incrementally update display when flood-filling
(customize-set-variable 'artist-flood-fill-show-incrementally nil)

;; whether or not to remove white-space at end of lines
(customize-set-variable 'artist-trim-line-endings nil)

;; (require 'elfeed nil t)

;; directory where elfeed will store its database.
(customize-set-variable 'elfeed-db-directory
                        (expand-file-name "elfeed" user-emacs-directory))

;; default directory for saving enclosures. Hide
(customize-set-variable 'elfeed-enclosure-default-dir
                        (expand-file-name "cache/elfeed" user-emacs-directory))

;; (require 'nnimap nil t)

;; limit the number of articles to look for after moving an article
(customize-set-variable 'nnimap-request-articles-find-limit nil)

;; (require 'mail-source nil t)

;; directory where incoming mail source files (if any) will be stored
(customize-set-variable 'mail-source-directory (expand-file-name "~/mail/"))

;; (require 'gnus nil t)

;; directory variable from which all other Gnus file variables are derived
(customize-set-variable 'gnus-directory (expand-file-name "~/news/"))

;; default method for selecting a newsgroup
;; nnnil is a Gnus backend that provides no groups or articles.  It's useful
;; as a primary select method when you want all your real select methods to
;; be secondary or foreign.
(customize-set-variable 'gnus-select-method '(nnnil))

;; a list of secondary methods that will be used for reading news
(customize-set-variable
 'gnus-secondary-select-methods '((nntp "news.gwene.org")))

;; if non-nil, automatically mark Gcc articles as read
(customize-set-variable 'gnus-gcc-mark-as-read nil)

;; whether we want to use the Gnus agent or not
(customize-set-variable 'gnus-agent nil)

;; non-nil means that you are a usenet novice
(customize-set-variable 'gnus-novice-user nil)

;; non-nil means that Gnus will run `gnus-find-new-newsgroups' at startup
(customize-set-variable 'gnus-check-new-newsgroups 'ask-server)

;; non-nil means that Gnus will read the entire active file at startup
(customize-set-variable 'gnus-read-active-file 'some)

;; if non-nil, use the entire emacs screen
(customize-set-variable 'gnus-use-full-window nil)

;; if non-nil, require your confirmation when catching up a group
(customize-set-variable 'gnus-interactive-catchup nil)

;; if non-nil, require your confirmation when exiting gnus
(customize-set-variable 'gnus-interactive-exit nil)

;; if non-nil, use the entire Emacs screen
(customize-set-variable 'gnus-use-full-window nil)

;; format of group lines
(customize-set-variable 'gnus-group-line-format "%M%S%p%P%-12,12y: %B%(%G%)%l\n")

;; non-nil means that Gnus will check and remove bogus newsgroup at startup
(customize-set-variable 'gnus-check-bogus-newsgroups t)

;; non-nil means that Gnus will run `gnus-find-new-newsgroups' at startup
(customize-set-variable 'gnus-check-new-newsgroups 'ask-server)

;; if non-nil, display an arrow highlighting the current article
(customize-set-variable 'gnus-summary-display-arrow nil)

;; if non-nil, ignore articles with identical Message-ID headers
(customize-set-variable 'gnus-summary-ignore-duplicates t)

;; the format specification of the lines in the summary buffer.
(customize-set-variable
 'gnus-summary-line-format " %U %R %d %-5,5L %-12,12n %B%-80,80S\n")

;; specifies date format depending on age of article
(customize-set-variable
 'gnus-user-date-format-alist '((t . "%Y-%m-%d %H:%M")))

;; function used for gathering loose threads.
(customize-set-variable
 'gnus-summary-thread-gathering-function
 'gnus-gather-threads-by-references)

;; list of functions used for sorting threads in the summary buffer
;; by default, threads are sorted by article number
(customize-set-variable 'gnus-thread-sort-functions
                        '(gnus-thread-sort-by-date
                          gnus-thread-sort-by-number))

;; thread formats
(customize-set-variable 'gnus-summary-make-false-root 'dummy)
(customize-set-variable 'gnus-sum-thread-tree-false-root      "  ┈─► ")
(customize-set-variable 'gnus-sum-thread-tree-single-indent   "  » ")
(customize-set-variable 'gnus-sum-thread-tree-root            "  ● ")
(customize-set-variable 'gnus-sum-thread-tree-vertical        "  │   ")
(customize-set-variable 'gnus-sum-thread-tree-leaf-with-other "  ├─► ")
(customize-set-variable 'gnus-sum-thread-tree-single-leaf     "  ╰─► ")
(customize-set-variable 'gnus-sum-thread-tree-indent          "  ")

;; display smileys/fill long lines/fill article
(customize-set-variable 'gnus-treat-display-smileys nil)
(customize-set-variable 'gnus-treat-fill-long-lines nil)
(customize-set-variable 'gnus-treat-fill-article nil)



;; goto topics
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

;; set timestamp
(add-hook 'gnus-select-group-hook 'gnus-group-set-timestamp)

(eval-after-load 'gnus-group-mode
  (lambda ()
    (when (boundp 'gnus-group-mode-map)
      (define-key gnus-group-mode-map (kbd "TAB") 'gnus-group-select-group))))

;; (require 'emms nil t)
;; (require 'emms-setup nil t)

;; string used for displaying the current track in mode-line and titlebar
(customize-set-variable 'emms-mode-line-format "")

;; list of players that EMMS can use
(customize-set-variable 'emms-player-list '(emms-player-mpv))

;; default list of players for emms-setup
;; (customize-set-variable 'emms-setup-default-player-list '(emms-player-mpv))

;;  the default name of the EMMS playlist buffer
(customize-set-variable 'emms-playlist-buffer-name "*playlist*")

;; if this is nil, existing playlists will be quietly overwritten
(customize-set-variable ' emms-source-playlist-ask-before-overwrite nil)

;; the default directory to look for media files.
(customize-set-variable
 'emms-source-file-default-directory (expand-file-name "~/media/music/"))

;; binds emms-playlis-mode-map
(eval-after-load 'emms-playlist-mode
  (lambda ()
    ;; avoid warnings
    (when (boundp 'emms-playlist-mode-map)
      ;; add files inside playlist mode buffer
      (define-key emms-playlist-mode-map (kbd "A") 'emms-add-file))))

;; binds vlm-media-map
(define-key vlm-media-map (kbd "P") 'play-playlist)
(define-key vlm-media-map (kbd "a") 'emms-add-file)
(define-key vlm-media-map (kbd "s") 'emms-start)
(define-key vlm-media-map (kbd "q") 'emms-stop)

;; my-emms.el
(define-key vlm-media-map (kbd "v") 'pause-track)
(define-key vlm-media-map (kbd "p") 'previous-track)
(define-key vlm-media-map (kbd "n") 'next-track)
(define-key vlm-media-map (kbd "r") 'random-track)

;; if emms is available, enable it
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'emms-minimalistic)
            (funcall 'emms-default-players)))

;; (require 'rcirc nil t)

;; non-nil means log irc activity to disk
(customize-set-variable 'rcirc-log-flag nil)

;; major-mode function to use in multiline edit buffers
(customize-set-variable 'rcirc-multiline-major-mode 'text-mode)

;; format string to use in nick completions
(customize-set-variable 'rcirc-nick-completion-format "%s: ")

;; list of authentication passwords (not your job)
(customize-set-variable 'rcirc-authinfo nil)

;; prompt string to use in IRC buffers
;; %n: nick, %s: server, %t target: channel or user
(customize-set-variable 'rcirc-prompt "%t » ")

;; coding system used to decode incoming irc messages
(customize-set-variable 'rcirc-decode-coding-system 'utf-8)

;; the default reason to send when quitting a server
(customize-set-variable 'rcirc-default-quit-reason "")

;; the default reason to send when parting from a channel
(customize-set-variable 'rcirc-default-part-reason "")

;; responses which will be hidden when `rcirc-omit-mode is enable
(customize-set-variable 'rcirc-omit-responses
                        '("JOIN" "PART" "QUIT" "NICK"))

;; the minimum interval in seconds between reconnect attempts
;; when 0, do not auto-reconnect
(customize-set-variable 'rcirc-reconnect-delay 2)

;; an alist of IRC connections to establish when running `rcirc'
(customize-set-variable 'rcirc-server-alist
                        '(("irc.freenode.net"
                           :port 6697
                           :server-alias "freenode"
                           :encryption tls
                           :nick "ercdude"
                           :channels ("#lisp-br #freebsd-br"))))

(add-hook 'rcirc-mode-hook
          (lambda ()
            ;; (funcall 'rcirc-omit-mode 1)
            (funcall 'flyspell-mode 1)))

;; (require 'eww nil t)

;; prefix uRL to search engine
(customize-set-variable 'eww-search-prefix "https://www.google.com/search?q=")
;; (customize-set-variable eww-search-prefix "https://duckduckgo.com/html/?q=")

;; directory where files will downloaded
(customize-set-variable 'eww-download-directory "~/down")

;; symbol used to represent a checkbox
(customize-set-variable 'eww-form-checkbox-symbol "[ ]")

;; symbol used to represent a selected checkbox.
(customize-set-variable 'eww-form-checkbox-selected-symbol "[X]")
;; (customize-set-variable eww-form-checkbox-symbol "☐") ; Unicode hex 2610
;; (customize-set-variable eww-form-checkbox-selected-symbol "☑") ; Unicode hex 2611

(add-hook 'eww-mode-hook
          ;; disable truncate lines
          (lambda () (setq truncate-lines nil)))

(eval-after-load 'eww
  (lambda ()
    (when (boundp 'eww-mode-map)
      (define-key eww-mode-map (kbd "C-j") 'eww-follow-link))))

;; (require 'browse-url nil t)

;; the name of the browser program used by ‘browse-url-generic’.
(customize-set-variable 'browse-url-generic-program "chrome")

;; function to display the current buffer in a WWW browser: eww
(customize-set-variable 'browse-url-browser-function 'eww-browse-url)

;; (require 'ag nil t)

;; non-nil means we highlight the current search term in results
(customize-set-variable 'ag-highlight-search t)

;; non-nil means we reuse the existing search results buffer
(customize-set-variable 'ag-reuse-buffers t)

;; non-nil means we open search results in the same window
(customize-set-variable 'ag-reuse-window t)

;; projects keymap
(define-key vlm-pm-map (kbd "a") 'ag-project-at-point)

;; filter keymap
(define-key vlm-filter-map (kbd "a") 'ag)
(define-key vlm-filter-map (kbd "d") 'ag-dired)
(define-key vlm-filter-map (kbd "f") 'ag-files)

;; (require 'grep nil t)

;; the default find command for M-x grep-find or M-x find-grep
(customize-set-variable 'grep-find-command
                        '("find ~/ -type f -exec grep --color -nH --null -e  \\{\\} +" . 49))

(define-key vlm-filter-map (kbd "r") 'rgrep)

;; (require 'ispell nil t)

;; program invoked by M-x ispell-word and M-x ispell-region commands.
(customize-set-variable 'ispell-program-name "aspell")

;; todo research (not working)
;; (add-to-list 'display-buffer-alist
;;              '("\\*Choices\\*"
;;                (display-buffer-below-selected display-buffer-at-bottom)
;;                (inhibit-same-window . t)
;;                (window-height . 0.2)))

;; enable globally after emacs startup
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'ispell-minor-mode 1)))

;; vlm-sc-map
(define-key vlm-sc-map (kbd "i") 'ispell-word)
(define-key vlm-sc-map (kbd "I") 'ispell-buffer)

;; (require 'flyspell nil t)

;; a string that is the name of the default dictionary
;; this is passed to the ‘ispell-change-dictionary’ when flyspell is started
(customize-set-variable 'flyspell-default-dictionary "english")

(add-hook 'text-mode-hook #'flyspell-mode)
(add-hook 'prog-mode-hook #'flyspell-prog-mode)

;; (require 'flymake nil t)



(define-key vlm-sc-map (kbd "e") 'flymake-show-diagnostics-buffer)

(add-hook 'prog-mode-hook #'flymake-mode)

;; (require 'cannon nil t)

;; file in which the launcher state is
;; saved between Emacs sessions
(customize-set-variable
 'cannon-cache-file
 (expand-file-name "cache/cannon" user-emacs-directory))

;; clt-x-map (C-x) prefix
(define-key ctl-x-map (kbd "x") 'cannon-launch)

;; (require 'message nil t)

;; your preference for a mail composition package
(customize-set-variable 'mail-user-agent 'message-user-agent)
;; (customize-set-variable 'mail-user-agent 'gnus-user-agent)

;; if non-nil, `compose-mail' warns about changes in `mail-user-agent'
(customize-set-variable 'compose-mail-user-agent-warnings nil)

;; if it is nil, use Gnus; else use `mail-user-agent'
(customize-set-variable 'message-mail-user-agent t)

;; string to be inserted at the end of the message buffer
(customize-set-variable 'message-signature "")

;; format of the "whomever writes:" line
(customize-set-variable 'message-citation-line-format "%f [%Y-%m-%d, %R %z]:\n")

;; function called to insert the "whomever writes:" line
(customize-set-variable 'message-citation-line-function
                        'message-insert-formatted-citation-line)
;; function that inserts a formatted citation line

;; when non-nil, ask for confirmation when sending a message
(customize-set-variable 'message-confirm-send t)

;; non-nil means that the message buffer will be killed after sending a message
(customize-set-variable 'message-kill-buffer-on-exit t)

;; whether to confirm a wide reply to multiple email recipients
(customize-set-variable 'message-wide-reply-confirm-recipients t)

;; this variable is obsolete since 26.1;
;; the default charset comes from the language environment
;; default charset used in non-MULE Emacsen
(customize-set-variable 'message-default-charset 'utf-8)

;; normal hook, run each time a new outgoing message is initialized
(add-hook 'message-setup-hook 'message-sort-headers)

;; (require 'verb nil t)

(add-hook 'org-ctrl-c-ctrl-c-hook
          (lambda ()
            (when (and (boundp 'verb-mode) verb-mode)
              (funcall 'verb-send-request-on-point 'this-window))))

;; (require 'comint nil t)

;; if non-nil, assume that the subprocess echoes any input.
(customize-set-variable 'comint-process-echoes t)

;; if non-nil, use comint-prompt-regexp to recognize prompts.
(customize-set-variable 'comint-use-prompt-regexp t)

;; regexp to recognize prompts in the inferior process.
;; (customize-set-variable 'comint-prompt-regexp ".*:.*>.*? ")

;; value to use for TERM when the system uses terminfo.
(customize-set-variable 'comint-terminfo-terminal "xterm-color")

;; (require 'ielm nil t)

;; if non-nil, after entering the first line of
;; an incomplete sexp, a newline will be inserted after the prompt.
(customize-set-variable 'ielm-dynamic-multiline-inputs t)

;; if non-nil, IELM will beep on error
(customize-set-variable 'ielm-noisy nil)

;; prompt used in IELM
(customize-set-variable 'ielm-prompt "» ")

;; if non-nil, the IELM prompt is read only
(customize-set-variable 'ielm-prompt-read-only nil)

;; (require 'sql nil t)

;; select the SQL database product used
(customize-set-variable 'sql-product "sqlite")

;; global-map
(global-set-key (kbd "<print>") 'capture-screen)

;; global-map
(global-set-key (kbd "s-_") 'mute-audio)
(global-set-key (kbd "s--") 'lower-volume)
(global-set-key (kbd "s-+") 'increase-volume)

;; (require 'calendar nil t)

;; name of the file in which one’s personal diary of dates is kept
(customize-set-variable
 'diary-file (expand-file-name "cache/diary" user-emacs-directory))

;; (require 'dashboard nil t)

;; association list of items to show in the startup buffer.
(customize-set-variable 'dashboard-items
                        '((recents . 4)
                          (projects . 4)
                          (agenda . 4)
                          (bookmarks . 4)))

;; banners directory
;; (customize-set-variable 'dashboard-banners-directory
;;                         (expand-file-name "banner"  user-emacs-directory))

;; specify the startup banner
(customize-set-variable 'dashboard-startup-banner 1)

;; separator to use between the different pages.
(customize-set-variable 'dashboard-page-separator "

")

;; footer icon
(customize-set-variable 'dashboard-footer-icon
                        #(" " 0 1 (face dashboard-footer)))

;; when non nil, a footer will be displayed at the bottom.
(customize-set-variable 'dashboard-set-footer nil)


(customize-set-variable
 'dashboard-footer "Litany Against Fear

I must not fear.
Fear is the mind-killer.
Fear is the little-death that brings total obliteration.
I will face my fear.
I will permit it to pass over me and through me.
And when it has gone past I will turn the inner eye to see its path.
Where the fear has gone there will be nothing.
Only I will remain.")

;; a list of messages, one of which dashboard chooses to display
(customize-set-variable 'dashboard-footer-messages nil)

;; when non nil, file lists will have icons
(customize-set-variable 'dashboard-set-file-icons nil)

;; when non nil, heading sections will have icons
(customize-set-variable 'dashboard-set-heading-icons nil)

;; set initial buffer choice (emacsclient fix)
(customize-set-variable 'initial-buffer-choice
                        (lambda ()
                          (or (get-buffer "*dashboard*")
                              (get-buffer "*scratch*"))))

(defun vlm-initialize-dashboard ()
  "Opens or switch to *dashboard* buffer."
  (interactive)
  (let ((buffer (get-buffer "*dashboard*")))
    (unless buffer
      (setq buffer (generate-new-buffer "*dashboard*")))
    (funcall 'dashboard-insert-startupify-lists)
    (safe-funcall 'dashboard-refresh-buffer)))

(defun vlm-dashboard-insert-footer ()
  "Insert dashboard-footer message."
  (read-only-mode 0)
  (when (boundp 'dashboard-footer)
    (insert (propertize dashboard-footer 'face 'dashboard-footer)))
  (insert "\n")
  (read-only-mode 1))

;; insert footer
(add-hook 'dashboard-mode-hook
          (lambda ()
            (interactive)
            (vlm-dashboard-insert-footer)))

;;(add-hook 'after-init-hook 'vlm-initialize-dashboard)

;; (require 'outline nil t)

;; (require 'org nil t)

;; custom
;; when non-nil, fontify code in code blocks
(customize-set-variable 'org-src-fontify-natively t)

;; if non-nil, the effect of TAB in a code block is as if it were
;; issued in the language major mode buffer
(customize-set-variable 'org-src-tab-acts-natively t)

;; indentation for the content of a source code block.
(customize-set-variable 'org-edit-src-content-indentation 0)

;; confirm before evaluation
(customize-set-variable 'org-confirm-babel-evaluate t)

;; how the source code edit buffer should be displayed
(customize-set-variable 'org-src-window-setup 'current-window)

;; non-nil means C-a and C-e behave specially in headlines and items
(customize-set-variable 'org-special-ctrl-a/e t)

(add-hook 'org-mode-hook
          (lambda ()
            ;; do not truncate lines
            (setq truncate-lines nil)
            ;; languages which can be evaluated in Org buffers.
            (org-babel-do-load-languages
             'org-babel-load-languages
             '((emacs-lisp . t)
               (shell . t)
               (haskell . t)
               (ocaml . t)
               (sqlite . t)
               (python . t)))))

(eval-after-load 'org
  (lambda()
    (when (boundp 'org-mode-map)
      (define-key org-mode-map (kbd "C-M-i") 'complete-at-point-or-indent))))

;; the files to be used for agenda display, should be a list of them.
(customize-set-variable 'org-agenda-files '("~/org/agenda.org"))

;; the separator between blocks in the agenda
(customize-set-variable 'org-agenda-block-separator "=")

;; a single-character string to be used as the bulk mark
(customize-set-variable 'org-agenda-buld-mark-char ">")

;; non-nil means make the block agenda more compact
(customize-set-variable 'org-agenda-compact-blocks t)

;; when t, a confirmation is always needed.
;; when a number N, confirmation is only needed when the text
;; to be killed contains more than N non-white lines
(customize-set-variable 'org-agenda-confirm-kill t)

;; if non-nil, include in the agenda entries from
;; the Emacs Calendar’s diary
(customize-set-variable 'org-agenda-include-diary t)

;; inhibit startup when preparing agenda buffers
;; when this variable is t, the initialization of the Org agenda
;; buffers is inhibited: e.g. the visibility state is not set, the
;; tables are not re-aligned, etc.
(customize-set-variable 'org-agenda-inhibit-startup t)

;; (require 'tex-mode nil t)

;; (require 'markdown-mode nil t)

(customize-set-variable 'markdown-command "multimarkdown")

(when (boundp 'markdown-mode-map)
  (progn
    (define-key markdown-mode-map (kbd "TAB") 'complete-at-point-or-indent)))

;; (require 'doc-view nil t)

;; the base directory, where the PNG images will be saved
(customize-set-variable
 'doc-view-cache-directory
 (concat (expand-file-name user-emacs-directory) "cache/docview"))

;; in continuous mode reaching the page edge advances to next/previous page
(customize-set-variable 'doc-view-continuous t)

;; (require 'dictionary nil t)

;; create some clickable buttons on top of the window if non-nil
(customize-set-variable 'dictionary-create-buttons nil)

;; should the dictionary command reuse previous dictionary buffers?
(customize-set-variable 'dictionary-use-single-buffer t)

(defun vlm-dictionary-search-at-point ()
  "Search WORD in dictionary at point."
  (interactive)
  (let ((word (or (thing-at-point 'word)
                  (read-string "Word: "))))
    ;; switch/case
    (cond
     ;; word?
     ((eq word "") (message "Missing word")) ; no word submited
     ;; default, search in dictionary
     (t
      (when (fboundp 'dictionary-search)
        (dictionary-search word))))))

;; binds
(define-key vlm-docs-map (kbd ".") 'vlm-dictionary-search-at-point)

;; (require 'remember nil t)



;; (require 'org-weblog nil t)

;; title of the blog
(customize-set-variable
 'org-weblog-publish-title "Lambdart")

;; url of the blog.
(customize-set-variable
 'org-weblog-url "https://lambdart.github.io/")

;; directory where published HTML files are stored
(customize-set-variable
 'org-weblog-publish-directory "~/work/lambdart/site/preview/")

;; directory where published ORG files are stored
(customize-set-variable
 'org-weblog-posts-directory "~/work/lambdart/posts/")

;; directory where published ORG files are stored
(customize-set-variable
 'org-weblog-pages-directory "~/work/lambdart/pages/")

;; directory where unpublished ORG files are stored.
(customize-set-variable
 'org-weblog-drafts-directory "~/work/lambdart/drafts/")

;; ;; use preview versions of posts on multipost pages
;; (customize-set-variable 'org-weblog-use-preview-flag t)

;; ;; show tags below posts, and generate tag pages
;; (customize-set-variable 'org-weblog-enable-tags t)

;; ;; when preview is enabled, convert <h1> to <h2> for the previews
;; (customize-set-variable 'org-weblog-preview-convert-titles nil)

;; ;; the HTML appended to the preview if some part of the post is hidden
;; (customize-set-variable 'org-weblog-preview-ellipsis "(...)")

;; (require 'man nil t)

(add-hook 'Man-mode-hook
          (lambda ()
            ;; don't truncate lines
            (setq truncate-lines nil)))

(eval-after-load 'man
  (lambda ()
    (when (boundp 'Man-mode-map)
      (define-key Man-mode-map (kbd "C-j") 'push-button))))

;; vlm-docs-map docs actions prefix map
(define-key vlm-docs-map (kbd "m") 'manual-entry)

;; (require 'woman nil t)

;; if non-nil then show the *WoMan-Log* buffer if appropriate
(customize-set-variable 'woman-show-log nil)

(define-key vlm-docs-map (kbd "w") 'woman)

;; (require 'ddoc nil t)

;; default path for docsets
(customize-set-variable
 'ddoc-docsets-path
 (concat (expand-file-name user-emacs-directory) "docsets"))

;; minimum length to start searching in docsets
;; (customize-set-variable 'ddoc-min-length 0)

;; format of the displayed candidates
(customize-set-variable 'ddoc-candidate-format "%d %t %n")

(defun vlm-activate-docset (docset)
  "Activate a DOCSET, if available."
  (when (fboundp 'ddoc-activate-docset)
    (funcall 'ddoc-activate-docset docset)))

;; vlm-docs-map
;; (define-key vlm-docs-map (kbd "u") 'ddoc-update-docset)
(define-key vlm-docs-map (kbd "i") 'ddoc-install-docset)
(define-key vlm-docs-map (kbd "a") 'ddoc-activate-docset)
(define-key vlm-docs-map (kbd "d") 'ddoc-deactivate-docset)
(define-key vlm-docs-map (kbd "l") 'ddoc-find-file)

;; enable ddoc after emacs startup
;; (add-hook 'window-setup-hook
;;           (lambda ()
;;             (funcall 'turn-on-ddoc-mode)))

;; (require 'rfc-docs nil t)

(define-key vlm-docs-map (kbd "r") 'rfc-docs-find-file)

;; the directory where RFC documents are stored
(customize-set-variable
 'rfc-docs-directory
 (concat (expand-file-name user-emacs-directory) "rfc/"))

;; (require 'google-translate nil t)
;; (require 'google-translate-smooth-ui nil t)

;; alist of translation directions
;; each of direction could be selected directly in
;; the minibuffer during translation.
(customize-set-variable
 'google-translate-translation-directions-alist
 '(("pt" . "en") ("en" . "pt")))

;; default target language
(customize-set-variable
 'google-translate-default-target-language "pt")

;; default source language
;; "auto" if you want Google Translate to always detect the source language
(customize-set-variable 'google-translate-default-source-language
                        "auto")

;; determines where translation output will be displayed, if
;; `nil' the translation output will be displayed in the pop up
;; buffer (default).
(customize-set-variable 'google-translate-output-destination nil)

;; (require 'imenu nil t)

;; use a popup menu rather than a minibuffer prompt (no)
(customize-set-variable 'imenu-use-popup-menu nil)

;; if non-nil, eagerly popup the completion buffer.
(customize-set-variable 'imenu-eager-completion-buffer t)

;; non-nil means Imenu should always rescan the buffers
(customize-set-variable 'imenu-auto-rescan t)

;; when non-nil, ignore text inside comments and strings
(customize-set-variable 'imenu-generic-skip-comments-and-strings t)

;; maximum number of elements in a mouse menu for Imenu
(customize-set-variable 'imenu-max-items 128)

;; if a number, truncate Imenu entries to that length
(customize-set-variable 'imenu-max-item-length 256)

(global-set-key (kbd "M-`") 'imenu)

;; (require 'etags nil t)

;; control whether to add a new tags table to the current list
;; t means do; nil means don’t (always start a new list)
(customize-set-variable 'tags-add-tables nil)

;; if non-nil, print the name of the tags file in the *Tags List* buffer.
(customize-set-variable 'tags-apropos-verbose t)

;; whether tags operations should be case-sensitive
;; a value of t means case-insensitive, a value of nil means case-sensitive
(customize-set-variable 'tags-case-fold-search t)

(define-key vlm-tags-map (kbd "s") 'tags-search)
(define-key vlm-tags-map (kbd "r") 'xref-find-references)
(define-key vlm-tags-map (kbd "a") 'xref-find-apropos)
(define-key vlm-tags-map (kbd "R") 'tags-query-replace)
(define-key vlm-tags-map (kbd "f") 'find-tag)
(define-key vlm-tags-map (kbd "l") 'list-tags)
(define-key vlm-tags-map (kbd "v") 'visit-tags-table)
(define-key vlm-tags-map (kbd "d") 'tags-reset-tags-tables)
(define-key vlm-tags-map (kbd "c") 'select-tags-table)

;; (require 'xref nil t)

;; if non-nil, prompt for the identifier to find
;; when t, always prompt for the identifier name
;; when nil, prompt only when there’s no value at point we can use,
;; or when the command has been called with the prefix argument.
(customize-set-variable 'xref-prompt-for-identifier t)

;; (not xref-find-definitions
;;      xref-find-definitions-other-window
;;      xref-find-definitions-other-frame)

(define-key vlm-tags-map (kbd "a") 'xref-find-apropos)

;; (require 'rmsbolt nil t)

;; which output assembly format to use.
(customize-set-variable 'rmsbolt-asm-format "att")

;;    whether we should disassemble an output binary
(customize-set-variable 'rmsbolt-disassemble t)

;; rmsbolt mode lighter
(customize-set-variable 'rmsbolt-mode-lighter "RMS")

;; (require 'compile nil t)

;; non-nil to scroll the *compilation* buffer window as output appears
(customize-set-variable 'compilation-scroll-output t)

;; if t, always kill a running compilation process before starting a new one
(customize-set-variable 'compilation-always-kill t)

;; non-nil means M-x compile asks which buffers to save before compiling
;; otherwise, it saves all modified buffers without asking
(customize-set-variable 'compilation-ask-about-save nil)

;; if non-nil, automatically jump to the first error during compilation
;; (customize-set-variable 'compilation-auto-jump-to-first-error nil)

;; don't truncate lines
(add-hook 'compilation-mode-hook
          (lambda ()
            (setq truncate-lines nil)))

;; fix compilation buffer colors
(add-hook 'compilation-filter-hook
          (lambda ()
            (when (and (eq major-mode 'compilation-mode)
                       (boundp 'compilation-filter-start))
              (safe-funcall 'ansi-color-apply-on-region
                            compilation-filter-start
                            (point-max)))))

;; utils map
(define-key vlm-utils-map (kbd "c") 'compile-command-history)

;; (require 'magit nil t)

(define-key ctl-x-map (kbd "j") 'magit-status)

;; (require 'projectile nil t)

;; enable cache and choose indexing method
(customize-set-variable 'projectile-enable-caching t)
(customize-set-variable 'projectile-indexing-method 'hybrid)
(customize-set-variable 'projectile-completion-system 'default)

;; set bookmarks file localtion (cache)
(customize-set-variable 'projectile-known-projects-file
                        (concat user-emacs-directory "cache/projectile-bookmarks.eld"))

(customize-set-variable 'projectile-cache-file
                        (concat user-emacs-directory "cache/projectile.cache"))

(define-key vlm-pm-map (kbd "g") 'projectile-grep)
(define-key vlm-pm-map (kbd "p") 'projectile-ag)
(define-key vlm-pm-map (kbd "t") 'projectile-find-tag)
(define-key vlm-pm-map (kbd "f") 'projectile-find-file)
(define-key vlm-pm-map (kbd "<f5>") 'projectile-compile-project)
(define-key vlm-pm-map (kbd "&") 'projectile-run-eshell)
(define-key vlm-pm-map (kbd "o") 'projectile-switch-project)
(define-key vlm-pm-map (kbd "r") 'projectile-replace-regexp)
(define-key vlm-pm-map (kbd "R") 'projectile-replace)
(define-key vlm-pm-map (kbd "s") 'projectile-save-project-buffers)
(define-key vlm-pm-map (kbd "d") 'projectile-discover-projects-in-directory)
(define-key vlm-pm-map (kbd "c") 'projectile-cleanup-known-projects)
(define-key vlm-pm-map (kbd "C") 'projectile-invalidate-cache)
(define-key vlm-pm-map (kbd "U") 'projectile-purge-dir-from-cache)
(define-key vlm-pm-map (kbd "u") 'projectile-purge-file-from-cache)
(define-key vlm-pm-map (kbd ".") 'projectile-edit-dir-locals)
(define-key vlm-pm-map (kbd "k") 'projectile-kill-buffers)
(define-key vlm-pm-map (kbd "D") 'projectile-remove-known-project)

(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'projectile-mode 1)))

;; (require 'seedbar nil t)

;; non-nil if speedbar should display icons
(customize-set-variable 'speedbar-use-images nil)

;; non-nil means use imenu for file parsing, nil to use etags
(customize-set-variable 'speedbar-use-imenu-flag t)

(customize-set-variable 'wall-root-dir "~/images/bg/")

;; (require 'prog-mode nil t)

(define-key prog-mode-map (kbd "<tab>") 'complete-at-point-or-indent)

;; (require 'hideshow nil t)

(add-hook 'prog-mode-hook 'hs-minor-mode)

;; ctl-x-map
(define-key ctl-x-map (kbd "{") 'hs-toggle-hiding)

;; (require 'conf-mode nil t)

(add-hook 'window-setup-hook
          (lambda ()
            (add-to-list 'auto-mode-alist '("\\.compose\\'" . conf-mode))
            (add-to-list 'auto-mode-alist '("\\.dockerfile\\'" . conf-mode))))

;; (require 'text-mode nil t)

(add-hook 'text-mode-hook
          (lambda ()
            ;; turn on auto fill mode
            (turn-on-auto-fill)))

(define-key text-mode-map (kbd "C-c C-g") 'keyboard-quit)
(define-key text-mode-map (kbd "TAB") 'complete-at-point-or-indent)

(define-key text-mode-map (kbd "C-c C-k") 'with-editor-cancel)
(define-key text-mode-map (kbd "C-c C-c") 'with-editor-finish)

;; (require 'subword nil t)

(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'global-subword-mode 1)))

;; (require 'paren nil t)

;; visualization of matching parens
(add-hook 'window-setup-hook
          (lambda ()
            (funcall 'show-paren-mode 1)))

;; (require 'make-mode nil t)

;; if non-nil, automatically clean up continuation lines when saving
(customize-set-variable 'makefile-cleanup-continuations t)

;; if non-nil, insert a TAB after a target colon
(customize-set-variable 'makefile-tab-after-target-colon t)

;; (require 'cmake-mode nil t)

;; (require 'lisp-mode nil t)

;; number of columns to indent the second line of a (def...) form
(customize-set-variable 'lisp-body-indent 2)

(setq slime-lisp-implementations
      '((sbcl ("/usr/local/bin/sbcl") :coding-system utf-8-unix)))

;; (require 'elisp-mode nil t)

;; enable minor modes
(add-hook 'emacs-lisp-mode-hook
          (lambda()
            (funcall 'eldoc-mode 1)))

(add-hook 'lisp-interaction-mode-hook
          (lambda()
            (funcall 'eldoc-mode 1)))

;; (add-hook 'emacs-lisp-mode-hook (lambda ()))

;; emacs-lisp-mode-map
(eval-after-load 'elisp-mode
  (lambda ()
    (when (boundp 'emacs-lisp-mode-map)
      ;; unbind
      (define-key emacs-lisp-mode-map (kbd "DEL") 'nil)
      (define-key emacs-lisp-mode-map (kbd "ESC") 'nil)
      (define-key emacs-lisp-mode-map (kbd "C-x") 'nil)
      (define-key emacs-lisp-mode-map (kbd "C-M-x") 'nil)
      (define-key emacs-lisp-mode-map (kbd "C-M-q") 'nil)

      ;; bind
      (define-key emacs-lisp-mode-map (kbd "C-c C-f") 'eval-defun)
      (define-key emacs-lisp-mode-map (kbd "C-c C-r") 'eval-region)
      (define-key emacs-lisp-mode-map (kbd "C-c C-b") 'eval-buffer)
      (define-key emacs-lisp-mode-map (kbd "C-c C-c") 'emacs-lisp-byte-compile))))

;; (require 'slime nil t)

;; program name for invoking an inferior Lisp with for
;; inferior lisp mode
(customize-set-variable 'inferior-lisp-program "ccl")

;; (require 'geiser nil t)



;;;###autoload
(progn
  (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode)))

;; (require 'haskell nil t)

;; default function to use for completion
(customize-set-variable 'haskell-completing-read-function 'completing-read)

;; whether to add a "declarations" menu entry to menu bar
(customize-set-variable 'haskell-decl-scan-bindings-as-variables t)

;; whether to put top-level value bindings into a "variables" category
(customize-set-variable 'haskell-decl-scan-bindings-as-variables t)

(add-hook 'haskell-mode-hook
          (lambda ()
            ;; haskell indentation mode that deals with the layout rule.
            ;; it rebinds RET, DEL and BACKSPACE, so that indentations can be
            ;; set and deleted as if they were real tabs.
            (safe-funcall 'haskell-indentation-mode 1)

            ;; minor mode for enabling haskell-process interaction
            ;; non-nil if Interactive-Haskell mode is enabled.
            (safe-funcall 'interactive-haskell-mode 1)))

;; (require 'inf-haskell nil t)

;; (require 'haskell-doc nil t)

;; if non-nil use inf-haskell.el to get type and kind information
(customize-set-variable 'haskell-doc-use-inf-haskell t)

;; (require 'elixir-mode nil t)

;; additional arguments to `mix format`'
;; (customize-set-variable 'elixir-format-arguments nil)

(add-hook 'elixir-mode-hook
          (lambda ()
            ;; set dash docsets
            (vlm-activate-docset '"Elixir")))

;; non-nil means shrink the *Macroexpansion* window to fit its contents
(customize-set-variable 'c-macro-shrink-window-flag t)

;; non-nil makes `c-macro-expand' prompt for preprocessor arguments
(customize-set-variable 'c-macro-prompt-flag t)

;; (require 'cc-mode nil t)

;; TODO research
;; (customize-set-variable 'c-default-style nil)

(add-hook 'c-mode-hook
          (lambda ()
            ;; set dash docset
            (vlm-activate-docset '"C")))

(add-hook 'c++-mode-hook
          (lambda ()
            ;; set dash docset
            (vlm-activate-docset '"C++")))

(eval-after-load 'cc-mode
  (lambda ()
    (when (and (boundp 'c-mode-map) (boundp 'c++-mode-map))
      ;; complete or indent
      (define-key c-mode-map (kbd "TAB") 'complete-at-point-or-indent)
      (define-key c++-mode-map (kbd "TAB") 'complete-at-point-or-indent)
      ;; compilation keybind
      (define-key c-mode-map (kbd "C-c C-c")
        (lambda ()
          (interactive)
          (funcall 'compile compile-command)))

      (define-key c++-mode-map (kbd "C-c C-c")
        (lambda ()
          (interactive)
          (funcall 'compile compile-command))))))

;; (require 'csharp-mode nil t)

;; (require 'go-mode nil t)

(add-hook 'go-mode-hook
          (lambda ()
            ;; set dash docsets
            (vlm-activate-docset '"Go")))

;; add (*.go . go-mode) to auto-mode-alist
;; init go-mode when a file with the extersion .go is opened
(add-hook 'window-setup-hook
          (lambda ()
            (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))))

;; (require 'sh-script nil t)

;; (add-hook 'sh-mode-hook (lambda ()))

;; (require 'fish-mode nil t)

;; (add-hook 'fish-mode-hook (lambda ()))

;; (require 'lua-mode nil t)

;; non-nil means display lua-process-buffer after sending a command.
(customize-set-variable 'lua-process-buffer t)

;; default application to run in Lua process
(customize-set-variable 'lua-default-application "lua")

;; command switches for lua-default-application
(customize-set-variable 'lua-default-command-switches "-i")

;; amount by which Lua subexpressions are indented
(customize-set-variable 'lua-indent-level 4)

;; if non-nil, contents of multiline string will be indented
(customize-set-variable 'lua-indent-string-contents t)

;; jump to innermost traceback location in *lua* buffer
;; when this variable is non-nil and a traceback occurs
;; when running Lua code in a process, jump immediately
;; to the source code of the innermost traceback location
(customize-set-variable 'lua-jump-on-traceback t)

(add-hook 'lua-mode-hook
          (lambda ()
            ;; activate dash docset
            (vlm-activate-docset "Lua")))

;; add auto-mode
(add-hook 'window-setup-hook
          (lambda ()
            (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
            (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))))

;; (require 'python nil t)

;; default Python interpreter for shell
(customize-set-variable 'python-shell-interpreter "python")

;; non-nil means template skeletons will be automagically inserted
(customize-set-variable 'python-skeleton-autoinsert t)

;; enable modes
(add-hook 'python-mode-hook
          (lambda()
            ;; enable eldoc mode
            (funcall 'eldoc-mode 1)))

;; set backends
(add-hook 'python-mode-hook
          (lambda ()
            ;; set dash docsets
            (vlm-activate-docset '"Python 3")))

;; (require 'mql-mode nil t)

(add-hook 'mql-mode-hook
          (lambda ()
            ;; activate mql5 docset
            (vlm-activate-docset '"mql5")))

;; (require 'web-mode nil t)

;; (add-hook 'window-setup-hook
;;           (lambda ()
;;             ;; add files extensions to web-mode
;;             (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
;;             (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
;;             (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
;;             (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
;;             (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
;;             (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
;;             (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
;;             ;; resolve warning
;;             (when (boundp 'web-mode-engines-alist)
;;               (add-to-list 'web-mode-engines-alist '(("php" . "\\.phtml\\'"))))))

(defvar vm-not-used-libraries
  '(cedet semantic chinese)
  "Libraries that are not used.")

;; (add-hook 'window-setup-hook
;;           (lambda ()
;;             (let (libraries vlm-not-used-libraries)
;;               (dolist (library libraries)
;;                 (unload-feature library '(4))))))

;; clean esc map
;; (define-key esc-map (kbd "ESC") nil)
(define-key esc-map (kbd "<f10>") nil)

;; (define-key ctl-x-map (kbd "C-c") nil)
(define-key ctl-x-map (kbd "C-j") nil)
(define-key ctl-x-map (kbd "C-+") nil)
(define-key ctl-x-map (kbd "C-a") nil)
(define-key ctl-x-map (kbd "C-n") nil)
(define-key ctl-x-map (kbd "C-z") nil)
(define-key ctl-x-map (kbd "C-p") nil)
(define-key ctl-x-map (kbd "C-h") nil)
;; (define-key ctl-x-map (kbd "C-u") nil)
(define-key ctl-x-map (kbd "C-\@") nil)

;; Redo(action)! this is good!
;; (define-key ctl-x-map (kbd "M-:") nil)

;; Scroll page
;; (define-key ctl-x-map (kbd "]") nil)
;; (define-key ctl-x-map (kbd "[") nil)

;; scroll left/right, useful
;;(define-key ctl-x-map (kbd "<") nil)
;;(define-key ctl-x-map (kbd ">") nil)
(define-key ctl-x-map (kbd "\@") nil)
(define-key ctl-x-map (kbd "-") nil)
(define-key ctl-x-map (kbd ";") nil)

;; server edit? may be good... research
(define-key ctl-x-map (kbd "#") nil)
(define-key ctl-x-map (kbd "*") nil)
(define-key ctl-x-map (kbd "'") nil)

;; selective-display, this is good!! but only works for seting nil (disable)
;; TODO: make a function to toggle with the current colunm
(define-key ctl-x-map (kbd "$") nil)

(define-key ctl-x-map (kbd "{") nil)
(define-key ctl-x-map (kbd "}") nil)
(define-key ctl-x-map (kbd "^") nil)
;; (define-key ctl-x-map (kbd "n") nil)
;; (define-key ctl-x-map (kbd "f") nil)
;; (define-key ctl-x-map (kbd "a") nil)
;; (define-key ctl-x-map (kbd "v") nil)
(define-key ctl-x-map (kbd "h") nil)
;; (define-key ctl-x-map (kbd "d") nil)
(define-key ctl-x-map (kbd "X") nil)
;; (define-key ctl-x-map (kbd "8") nil)

(add-hook 'window-setup-hook
          (lambda ()
            (setq minor-mode-map-alist nil)))

;; unset
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-\\"))
(global-unset-key (kbd "C-_"))
;;(global-unset-key (kbd "M-l"))
;; (global-unset-key (kbd "M-h"))
;; (global-unset-key (kbd "M-\\"))
(global-unset-key (kbd "M-("))
(global-unset-key (kbd "M-)"))
;; (global-unset-key (kbd "M-r"))
(global-unset-key (kbd "M-{"))
(global-unset-key (kbd "M-}"))
(global-unset-key (kbd "S-SPC"))
(global-unset-key (kbd "<backtap>"))
(global-unset-key (kbd "M-="))
(global-unset-key (kbd "M-@"))
(global-unset-key (kbd "M-~"))

;; (global-unset-key (kbd "M-z"))
;; (global-unset-key (kbd "M-SPC"))
;; (global-unset-key (kbd "M-m"))
;; (global-unset-key (kbd "M-k"))
;; (global-unset-key (kbd "M-t"))
;; (global-unset-key (kbd "M-q"))

(global-unset-key (kbd "C-M-h"))
(global-unset-key (kbd "C-M-j"))
(global-unset-key (kbd "C-M-."))
(global-unset-key (kbd "C-M-l"))
(global-unset-key (kbd "C-M-/"))
;; (global-unset-key (kbd "C-M-;"))
(global-unset-key (kbd "C-M-@"))
(global-unset-key (kbd "C-M-\\"))
(global-unset-key (kbd "C-M-a"))
(global-unset-key (kbd "C-M-r"))
(global-unset-key (kbd "C-M-s"))
(global-unset-key (kbd "C-M-%"))
(global-unset-key (kbd "C-M-u"))
(global-unset-key (kbd "C-M-d"))
(global-unset-key (kbd "C-M-SPC"))
(global-unset-key (kbd "C-M-S-v"))

(global-unset-key (kbd "<C-M-end>"))
(global-unset-key (kbd "<C-M-home>"))
(global-unset-key (kbd "<C-S-backspace>"))
(global-unset-key (kbd "<C-backspace>"))
(global-unset-key (kbd "<C-delete>"))
(global-unset-key (kbd "<C-down>"))
(global-unset-key (kbd "<C-next>"))
(global-unset-key (kbd "<C-end>"))
(global-unset-key (kbd "<C-f10>"))
(global-unset-key (kbd "<M-f10>"))

(global-unset-key (kbd "<f10>"))
(global-unset-key (kbd "<f11>"))
(global-unset-key (kbd "<f16>"))
(global-unset-key (kbd "<f18>"))
(global-unset-key (kbd "<f20>"))
